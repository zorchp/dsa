/*
**   8个8 加减乘除得到 1000
**   Jet-Muffin
*/

#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <map>
#include <set>
#include <chrono>
using namespace std;
using namespace chrono;

const double EPS = 1e-6;
const int NUM = 8;
const int TARGET = 1000;

double A[NUM];
string res_str[NUM];
set<string> ans;
set<string>::iterator it;
int times = 0;

bool dfs(int n) {
    // 退出条件
    if (n == 1) {
        if (fabs(A[0] - TARGET) < EPS) {
            //            cout << res_str[0] << endl;
            ans.insert(res_str[0]);
        }
    }

    double a, b;
    string expa, expb;
    map<int, int> hash;
    hash.clear();

    for (int i = 0; i < n - 1; i++)
        for (int j = i + 1; j < n; j++) {
            times++;
            // 保存状态（操作数i,j）
            a = A[i];
            b = A[j];
            expa = res_str[i];
            expb = res_str[j];

            // hash判重
            if (hash[a] == b) continue;
            if (hash[b] == a) continue;
            hash[a] = b;

            // 改变状态
            A[j] = A[n - 1];
            res_str[j] = res_str[n - 1];

            // +
            A[i] = a + b;
            res_str[i] = '(' + expa + '+' + expb + ')';
            if (dfs(n - 1)) return true;

            // -
            A[i] = a - b;
            res_str[i] = '(' + expa + '-' + expb + ')';
            if (dfs(n - 1)) return true;

            // - 反方向
            A[i] = b - a;
            res_str[i] = '(' + expb + '-' + expa + ')';
            if (dfs(n - 1)) return true;

            // *
            A[i] = a * b;
            res_str[i] = '(' + expa + '*' + expb + ')';
            if (dfs(n - 1)) return true;

            // /
            if (b != 0) {
                A[i] = a / b;
                res_str[i] = '(' + expa + '/' + expb + ')';
                if (dfs(n - 1)) return true;
            }

            // /反方向
            if (a != 0) {
                A[i] = b / a;
                res_str[i] = '(' + expb + '/' + expa + ')';
                if (dfs(n - 1)) return true;
            }

            // 合并
            if (expa.find("(") == string::npos &&
                expb.find("(") == string::npos && b == NUM) {
                A[i] = a * 10 + b;
                res_str[i] = expa + expb;
                if (dfs(n - 1)) return true;
            }

            // 恢复状态, 回溯过程
            A[i] = a;
            A[j] = b;
            res_str[i] = expa;
            res_str[j] = expb;
        }
    return false;
}


int main() {
    for (int i = 0; i < NUM; i++) {
        A[i] = 8;
        /* char c[10]; */
        /* sprintf(c, "%.0f", A[i]); */
        res_str[i] = to_string((int)A[i]);
    }
    cout << "start searching...." << endl;

    auto start = system_clock::now();

    dfs(NUM);
    for (it = ans.begin(); it != ans.end(); it++) cout << *it << endl;

    auto end = system_clock::now();
    auto duration = duration_cast<microseconds>(end - start);
    cout << "Time spent: "
         << double(duration.count()) * microseconds::period::num << "ms"
         << endl;
    cout << "found : " << ans.size() << " expressions!" << endl;
}
/*
((((((8*8)*8)-8)*(8+8))/8)-8)
((((((8*8)*8)-8)/8)*(8+8))-8)
((((((8*8)+(8*8))*8)-8)-8)-8)
((((((8+8)*8)-(8/8))*8)-8)-8)
(((((8*8)*8)-8)*((8+8)/8))-8)
(((((8*8)*8)-8)/(8/(8+8)))-8)
(((((8*8)+(8*8))*8)-(8+8))-8)
(((((8*8)+(8*8))*8)-8)-(8+8))
(((((8+8)*8)-((8+8)/8))*8)-8)
(((((8+8)*8)-(8/8))*8)-(8+8))
(((((8+8)-(8/(8+8)))*8)*8)+8)
(((((8-(8/(8+8)))+8)*8)*8)+8)
((((8*8)+(8*8))*8)-((8+8)+8))
((((8*8)+(8*8))*8)-(8+(8+8)))
((((8*8)-((8+8)/8))*(8+8))+8)
((((8+8)*(((8*8)*8)-8))/8)-8)
((((8+8)*(8-((8/8)/8)))*8)-8)
((((8+8)*(8-(8/(8*8))))*8)-8)
((((8+8)*8)*(8-((8/8)/8)))-8)
((((8+8)*8)*(8-(8/(8*8))))-8)
((((8+8)*8)-(((8+8)+8)/8))*8)
((((8+8)-(8/(8+8)))*(8*8))+8)
((((8+8)/8)*(((8*8)*8)-8))-8)
((((8-((8/(8+8))-8))*8)*8)+8)
((((8-((8/8)/8))*(8+8))*8)-8)
((((8-((8/8)/8))*8)*(8+8))-8)
((((8-(8/(8*8)))*(8+8))*8)-8)
((((8-(8/(8*8)))*8)*(8+8))-8)
((((8-(8/(8+8)))+8)*(8*8))+8)
(((8*8)*((8+8)-(8/(8+8))))+8)
(((8*8)*((8-(8/(8+8)))+8))+8)
(((8*8)*(8-((8/(8+8))-8)))+8)
(((8+8)*((((8*8)*8)-8)/8))-8)
(((8+8)*((8*8)-((8+8)/8)))+8)
(((8+8)*((8-((8/8)/8))*8))-8)
(((8+8)*((8-(8/(8*8)))*8))-8)
(((8+8)/(8/(((8*8)*8)-8)))-8)
(((8-((8/(8+8))-8))*(8*8))+8)
(((8-((8/8)/8))*((8+8)*8))-8)
(((8-(8/(8*8)))*((8+8)*8))-8)
(8-(((((8/(8+8))-8)-8)*8)*8))
(8-((((8+8)/8)-(8*8))*(8+8)))
(8-((((8/(8+8))-(8+8))*8)*8))
(8-((((8/(8+8))-8)-8)*(8*8)))
(8-(((8/(8+8))-(8+8))*(8*8)))
(8-((8*8)*(((8/(8+8))-8)-8)))
(8-((8*8)*((8/(8+8))-(8+8))))
(8-((8+8)*(((8+8)/8)-(8*8))))
found : 48 expressions!
spend : 6583 ms
*/

/*
start searching....
((((((8*8)*8)-8)*(8+8))/8)-8)
((((((8*8)*8)-8)/8)*(8+8))-8)
((((((8*8)+(8*8))*8)-8)-8)-8)
((((((8+8)*8)-(8/8))*8)-8)-8)
((((((8/8)+8)+8)*8)*8)-88)
(((((8*8)*8)-8)*((8+8)/8))-8)
(((((8*8)*8)-8)/(8/(8+8)))-8)
(((((8*8)+(8*8))*8)-(8+8))-8)
(((((8*8)+(8*8))*8)-8)-(8+8))
(((((8*8)+(8*8))+8)*8)-88)
(((((8*8)+8)+(8*8))*8)-88)
(((((8+8)*8)*8)+(8*8))-88)
(((((8+8)*8)*8)-88)+(8*8))
(((((8+8)*8)+8)-(88/8))*8)
(((((8+8)*8)+888)-8)-8)
(((((8+8)*8)-((8+8)/8))*8)-8)
(((((8+8)*8)-(8/8))*8)-(8+8))
(((((8+8)*8)-(88/8))+8)*8)
(((((8+8)*8)-8)+888)-8)
(((((8+8)*8)-8)-8)+888)
(((((8+8)+(8/8))*8)*8)-88)
(((((8+8)-(8/(8+8)))*8)*8)+8)
(((((8-(8/(8+8)))+8)*8)*8)+8)
(((((8/8)+(8+8))*8)*8)-88)
(((((8/8)+8)*888)+8)/8)
(((((8/8)+8)+8)*(8*8))-88)
((((8(8/8)*8)-8)*8)-88)
((((8(88+8)+8)+8)+8)+8)
((((8*8)*(8+8))+(8*8))-88)
((((8*8)*(8+8))-88)+(8*8))
((((8*8)+((8*8)+8))*8)-88)
((((8*8)+(8*8))*8)-((8+8)+8))
((((8*8)+(8*8))*8)-(8+(8+8)))
((((8*8)-((8+8)/8))*(8+8))+8)
((((8*8)-8((8/8)-8))*8)-8)
((((8*8)-8)*8)-8(8-(8*8)))
((((8+8)*(((8*8)*8)-8))/8)-8)
((((8+8)*(8*8))+(8*8))-88)
((((8+8)*(8*8))-88)+(8*8))
((((8+8)*(8-((8/8)/8)))*8)-8)
((((8+8)*(8-(8/(8*8))))*8)-8)
((((8+8)*8)*(8-((8/8)/8)))-8)
((((8+8)*8)*(8-(8/(8*8))))-8)
((((8+8)*8)*8)+((8*8)-88))
((((8+8)*8)*8)-(88-(8*8)))
((((8+8)*8)+(8-(88/8)))*8)
((((8+8)*8)+(888-8))-8)
((((8+8)*8)+888)-(8+8))
((((8+8)*8)-(((8+8)+8)/8))*8)
((((8+8)*8)-((88/8)-8))*8)
((((8+8)*8)-(8+8))+888)
((((8+8)*8)-(8-888))-8)
((((8+8)*8)-8)+(888-8))
((((8+8)*8)-8)-(8-888))
((((8+8)+(8/8))*(8*8))-88)
((((8+8)+8(88+8))+8)+8)
((((8+8)+8)*8)+8(88-8))
((((8+8)+8)+8(88+8))+8)
((((8+8)+8)+8)+8(88+8))
((((8+8)+8)+88)+888)
((((8+8)+8)+888)+88)
((((8+8)+88)*8)+8(8+8))
((((8+8)+88)*8)+888)
((((8+8)+88)+8)+888)
((((8+8)+88)+888)+8)
((((8+8)+888)+8)+88)
((((8+8)+888)+88)+8)
((((8+8)-(8/(8+8)))*(8*8))+8)
((((8+8)/8)*(((8*8)*8)-8))-8)
((((8-((8/(8+8))-8))*8)*8)+8)
((((8-((8/8)/8))*(8+8))*8)-8)
((((8-((8/8)/8))*8)*(8+8))-8)
((((8-(8/(8*8)))*(8+8))*8)-8)
((((8-(8/(8*8)))*8)*(8+8))-8)
((((8-(8/(8+8)))+8)*(8*8))+8)
((((8-(8/8))*8(8/8))*8)-8)
((((8-(8/8))*8)*8(8/8))-8)
((((8/8)+(8+8))*(8*8))-88)
((((88+8)+8)*8)+8(8+8))
((((88+8)+8)+8)+888)
((((88+8)+8)+888)+8)
((((88+8)+888)+8)+8)
((((888+8)+8)+8)+88)
((((888+8)+8)+88)+8)
((((888+8)+88)+8)+8)
((((888+88)+8)+8)+8)
(((8(8/8)*(8-(8/8)))*8)-8)
(((8(8/8)*8)*(8-(8/8)))-8)
(((8(88+8)+(8+8))+8)+8)
(((8(88+8)+8)+(8+8))+8)
(((8(88+8)+8)+8)+(8+8))
(((8(88/8)*8)+(8*8))-8)
(((8(88/8)*8)-8)+(8*8))
(((8(88/8)+8)-(8/8))*8)
(((8(88/8)-(8/8))+8)*8)
(((8*(8+8))*8)-(88-(8*8)))
(((8*8)*(((8/8)+8)+8))-88)
(((8*8)*((8+8)+(8/8)))-88)
(((8*8)*((8+8)-(8/(8+8))))+8)
(((8*8)*((8-(8/(8+8)))+8))+8)
(((8*8)*((8/8)+(8+8)))-88)
(((8*8)*(8+8))+((8*8)-88))
(((8*8)*(8+8))-(8-(8*8))8)
(((8*8)*(8+8))-(88-(8*8)))
(((8*8)*(8-((8/(8+8))-8)))+8)
(((8*8)*8)+8(((8*8)-8)-8))
(((8*8)*8)+8((8*8)-(8+8)))
(((8*8)+(((8+8)*8)*8))-88)
(((8*8)+((8*8)*(8+8)))-88)
(((8*8)+((8+8)*(8*8)))-88)
(((8*8)+(8(88/8)*8))-8)
(((8*8)-8)+(8(88/8)*8))
(((8*8)-88)+(((8+8)*8)*8))
(((8*8)-88)+((8*(8+8))*8))
(((8*8)-88)+((8*8)*(8+8)))
(((8*8)-88)+((8+8)*(8*8)))
(((8*8)-88)+(8*((8+8)*8)))
(((8*8)8*8)-((8*8)+88))
(((8*8)8*8)-(88+(8*8)))
(((8+8)*((((8*8)*8)-8)/8))-8)
(((8+8)*((8*8)-((8+8)/8)))+8)
(((8+8)*((8-((8/8)/8))*8))-8)
(((8+8)*((8-(8/(8*8)))*8))-8)
(((8+8)*(8*8))+((8*8)-88))
(((8+8)*(8*8))-(8-(8*8))8)
(((8+8)*(8*8))-(88-(8*8)))
(((8+8)*(8-(8/8)))+888)
(((8+8)*8(88/(8+8)))-8)
(((8+8)*8)+((888-8)-8))
(((8+8)*8)+(888-(8+8)))
(((8+8)*8)-((8+8)-888))
(((8+8)*8)-((8-888)+8))
(((8+8)*8)-(8-(888-8)))
(((8+8)*8)-8((8-8)-88))
(((8+8)*8)-8((8-88)-8))
(((8+8)*8)-8(8-(88+8)))
(((8+8)+(8(88+8)+8))+8)
(((8+8)+(8+8))+8(8+8)8)
(((8+8)+(8+8))+8(8+88))
(((8+8)+(8+8))+8(88+8))
(((8+8)+(8+8))+8888)
(((8+8)+(88+8))+888)
(((8+8)+(888+8))+88)
(((8+8)+(888+88))+8)
(((8+8)+8(88+8))+(8+8))
(((8+8)+8)+(8(88+8)+8))
(((8+8)+8)+(888+88))
(((8+8)+88)+(8+888))
(((8+8)+88)+(888+8))
(((8+8)+888)+(8+8)8)
(((8+8)+888)+(8+88))
(((8+8)+888)+(88+8))
(((8+8)/(8/(((8*8)*8)-8)))-8)
(((8-((8+8)/8))*8(8+8))-8)
(((8-((8/(8+8))-8))*(8*8))+8)
(((8-((8/8)/8))*((8+8)*8))-8)
(((8-(8/(8*8)))*((8+8)*8))-8)
(((8-(8/8))*(8(8/8)*8))-8)
(((8-(8/8))*(8+8))+888)
(((8-(8/8))+8(88/8))*8)
(((8-(88/8))+((8+8)*8))*8)
(((88(8/8)-(8*8))*8)+8)
(((88+(8+8))*8)+8(8+8))
(((88+(8+8))*8)+888)
(((88+(8+8))+8)+888)
(((88+(8+8))+888)+8)
(((88+8)+(8+8))+888)
(((88+8)+(888+8))+8)
(((88+8)+8)+(888+8))
(((88+8)+888)+(8+8))
(((88+888)+(8+8))+8)
(((88+888)+8)+(8+8))
(((888*((8/8)+8))+8)/8)
(((888+((8+8)*8))-8)-8)
(((888+(8+8))+8)+88)
(((888+(8+8))+88)+8)
(((888+(88+8))+8)+8)
(((888+8)+(8+8))+88)
(((888+8)+(88+8))+8)
(((888+8)+8)+(88+8))
(((888+8)+88)+(8+8))
(((888+8)/8)+888)
(((888+88)+(8+8))+8)
(((888+88)+8)+(8+8))
(((888-8)+((8+8)*8))-8)
(((888-8)-8)+((8+8)*8))
((8(8(88-8)-8)-8)/8)
((8(8+8)*(8-((8+8)/8)))-8)
((8(8-8(8-88))-8)/8)
((8(8/8)*((8-(8/8))*8))-8)
((8(88+8)+((8+8)+8))+8)
((8(88+8)+(8+8))+(8+8))
((8(88+8)+8)+((8+8)+8))
((8(88/(8+8))*(8+8))-8)
((8(88/8)*8)+((8*8)-8))
((8(88/8)*8)-(8-(8*8)))
((8(88/8)+(8-(8/8)))*8)
((8(88/8)-((8/8)-8))*8)
((8(888-88)-8)/8)
((8*((8+8)*8))-(88-(8*8)))
((8*(8+8))-((8+8)-888))
((8*8)+((((8+8)*8)*8)-88))
((8*8)+(((8*8)*(8+8))-88))
((8*8)+(((8+8)*(8*8))-88))
((8*8)+((8(88/8)*8)-8))
((8*8)-(8-(8(88/8)*8)))
((8*8)-(88-(((8+8)*8)*8)))
((8*8)-(88-((8*8)*(8+8))))
((8*8)-(88-((8+8)*(8*8))))
((8+8)+((8(88+8)+8)+8))
((8+8)+((88+8)+888))
((8+8)+((888+8)+88))
((8+8)+((888+88)+8))
((8+8)+(8(88+8)+(8+8)))
((8+8)+(888+(88+8)))
((8-((8/8)-8(88/8)))*8)
((8-((88/8)-((8+8)*8)))*8)
((8-8(8(8-88)-8))/8)
((8-8(8-8(88-8)))/8)
((8-8(88-888))/8)
((88(88-8)-88)/8)
((88+((8+8)+8))+888)
((88+(8+8))+(8+888))
((88+(8+8))+(888+8))
((88+(888+(8+8)))+8)
((88+(888+8))+(8+8))
((88+8)+((8+8)+888))
((88+8)+((888+8)+8))
((88+8)+(888+(8+8)))
((88+888)+((8+8)+8))
((88+888)+(8+(8+8)))
((88-88(8-88))/8)
((888+(((8+8)*8)-8))-8)
((888+((8+8)*8))-(8+8))
((888+((8+8)+8))+88)
((888+((8+8)+88))+8)
((888+((88+8)+8))+8)
((888+(8+8))+(8+8)8)
((888+(8+8))+(8+88))
((888+(8+8))+(88+8))
((888+(88+(8+8)))+8)
((888+(88+8))+(8+8))
((888+8)+((8+8)+88))
((888+8)+((88+8)+8))
((888+8)+(88+(8+8)))
((888+88)+((8+8)+8))
((888+88)+(8+(8+8)))
((888-(8+8))+((8+8)*8))
((888-(8+8))+(8*(8+8)))
((888-(8-((8+8)*8)))-8)
((888-8)+(((8+8)*8)-8))
((888-8)-(8-((8+8)*8)))
((8888-888)/8)
(8(((8*8)-8)-8)+((8*8)*8))
(8(((88+8)/8)+88)-8)
(8((8(88-8)-8)/8)-8)
(8((8*8)-(8+8))+((8*8)*8))
(8((8*8)-(8+8))+(8*(8*8)))
(8((8-8(8-88))/8)-8)
(8((888-88)/8)-8)
(8(8(((8+8)/8)+8)-8)-8)
(8(8((88-8)/8)-8)-8)
(8(8(8(8/8)-8)-8)-8)
(8(8+8)+(((8+8)+88)*8))
(8(8+8)+(((88+8)+8)*8))
(8(8+8)+((88+(8+8))*8))
(8(8-8((8-88)/8))-8)
(8(8-8(8-8(8/8)))-8)
(8(88(8/8)-88)-8)
(8(88+8)+(((8+8)+8)+8))
(8(88+8)+((8+8)+(8+8)))
(8(88-8)+(((8+8)+8)*8))
(8-(((((8/(8+8))-8)-8)*8)*8))
(8-((((8+8)/8)-(8*8))*(8+8)))
(8-((((8/(8+8))-(8+8))*8)*8))
(8-((((8/(8+8))-8)-8)*(8*8)))
(8-(((8*8)-88(8/8))*8))
(8-(((8/(8+8))-(8+8))*(8*8)))
(8-((8*8)*(((8/(8+8))-8)-8)))
(8-((8*8)*((8/(8+8))-(8+8))))
(8-((8+8)*(((8+8)/8)-(8*8))))
(8-((8+8)*8((8-(8*8))/8)))
(8-(8((8-(8*8))/8)*(8+8)))
(8-8((8(8-88)-8)/8))
(8-8((8-8(88-8))/8))
(8-8((88-888)/8))
(8-8(8((8-88)/8)-8))
(8-8(8(8-8(8/8))-8))
(8-8(8-8(((8+8)/8)+8)))
(8-8(8-8((88-8)/8)))
(8-8(8-8(8(8/8)-8)))
(8-8(88-88(8/8)))
(88(((8+8)/8)+8)-88)
(88((88-8)/8)-88)
(88(8(8/8)-8)-88)
(88+((888+(8+8))+8))
(88+((888+8)+(8+8)))
(88+(888+((8+8)+8)))
(88-88((8-88)/8))
(88-88(8-8(8/8)))
(888(8/8)-888)
(888+((((8+8)*8)-8)-8))
(888+(((8+8)*8)-(8+8)))
(888+(((8+8)+8)+88))
(888+(((8+8)+88)+8))
(888+(((88+8)+8)+8))
(888+((8+8)*(8-(8/8))))
(888+((8+8)+(88+8)))
(888+((8-(8/8))*(8+8)))
(888+((88+(8+8))+8))
(888+((88+8)+(8+8)))
(888+(88+((8+8)+8)))
(888-(((8/8)-8)*(8+8)))
(888-((8+8)*((8/8)-8)))
(888-((8+8)-((8+8)*8)))
(888-((8-((8+8)*8))+8))
(888-(8-(((8+8)*8)-8)))
found : 317 expressions!
spend : 19548 ms
*/
