!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000-1.cpp	/^double A[NUM];$/;"	v
A	java/88-1000.java	/^static double[] A = new double[NUM];$/;"	f	class:Main
A005150	lc/look-and-say.py	/^def A005150(n):$/;"	f
ARCHITECTURE_ID	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
Ank	py/combinatorial_number.py	/^def Ank(n, k):$/;"	f
At	math/高精度计算C++.cpp	/^#define At(/;"	d	file:
BSTREE	c_cpp/Binary_Tree/bst.h	/^#define BSTREE$/;"	d
BSTreeNode	c_cpp/Binary_Tree/bst.h	/^    BSTreeNode() : BSTreeNode(0, nullptr, nullptr) {}$/;"	f	struct:BSTreeNode
BSTreeNode	c_cpp/Binary_Tree/bst.h	/^    BSTreeNode(int x) : BSTreeNode(x, nullptr, nullptr) {}$/;"	f	struct:BSTreeNode
BSTreeNode	c_cpp/Binary_Tree/bst.h	/^    BSTreeNode(int x, BSTreeNode* left1, BSTreeNode* right1)$/;"	f	struct:BSTreeNode
BSTreeNode	c_cpp/Binary_Tree/bst.h	/^struct BSTreeNode {$/;"	s
BTREE	c_cpp/Binary_Tree/bt.h	/^#define BTREE$/;"	d
BagMaxVAlue	c_cpp/dp/0-1-bag.cpp	/^    int BagMaxVAlue(vector<int>& value, vector<int>& weight, int maxWeight) {$/;"	f	class:Solution
BagMaxVAlue1	c_cpp/dp/0-1-bag.cpp	/^    int BagMaxVAlue1(vector<int>& value, vector<int>& weight, int maxWeight) {$/;"	f	class:Solution
BigInt	math/高精度计算C++.cpp	/^    BigInt(Long x = 0) {$/;"	f	class:BigInt
BigInt	math/高精度计算C++.cpp	/^    BigInt(const char *s) {$/;"	f	class:BigInt
BigInt	math/高精度计算C++.cpp	/^    BigInt(const std::vector<Long> &val, bool nega) : val(val), nega(nega) {}$/;"	f	class:BigInt	file:
BigInt	math/高精度计算C++.cpp	/^    BigInt(int size, bool nega) : val(size), nega(nega) {}$/;"	f	class:BigInt	file:
BigInt	math/高精度计算C++.cpp	/^class BigInt {$/;"	c	file:
BinarySearchTree	c_cpp/Binary_Tree/bst.h	/^    BinarySearchTree() : root(nullptr) {}$/;"	f	class:BinarySearchTree
BinarySearchTree	c_cpp/Binary_Tree/bst.h	/^class BinarySearchTree {$/;"	c
BinarySearchTree	py/data_structure/AVL_tree.py	/^class BinarySearchTree(object):$/;"	c
BinarySearchTree	py/data_structure/binary-search-tree.py	/^class BinarySearchTree(object):$/;"	c
BinaryTree	c_cpp/Binary_Tree/bt.h	/^    BinaryTree() : root(nullptr) {}$/;"	f	class:BinaryTree
BinaryTree	c_cpp/Binary_Tree/bt.h	/^class BinaryTree {$/;"	c
BinaryTree	py/data_structure/binary_Tree.py	/^class BinaryTree(object):$/;"	c
BubbleSort	c_cpp/Sort/Bubble_Sort.cpp	/^void BubbleSort(vector<int>& arr) {$/;"	f
BubbleSort	py/sort_algorithm/Bubble_Sort.py	/^def BubbleSort(a):$/;"	f
BubbleSort1	c_cpp/Sort/Bubble_Sort.cpp	/^void BubbleSort1(vector<int>& arr) {$/;"	f
BubbleSort2	c_cpp/Sort/Bubble_Sort.cpp	/^void BubbleSort2(vector<int>& arr) {$/;"	f
BucketSort	c_cpp/Sort/Bucket_Sort.cpp	/^void BucketSort(vector<int>& arr) {$/;"	f
Build_Max_Heap	c_cpp/Sort/Heap_Sort.cpp	/^void Build_Max_Heap(vector<int> &arr) {$/;"	f
Build_Min_Heap	c_cpp/Sort/Heap_Sort_reverse.cpp	/^void Build_Min_Heap(vector<int> &arr) {$/;"	f
CMAKE_BINARY_DIR	math/Makefile	/^CMAKE_BINARY_DIR = \/Users\/hep\/code\/dsa\/c_cpp\/math$/;"	m
CMAKE_BINARY_DIR	math/build/Makefile	/^CMAKE_BINARY_DIR = \/Users\/hep\/code\/dsa\/c_cpp\/math\/build$/;"	m
CMAKE_COMMAND	math/Makefile	/^CMAKE_COMMAND = \/opt\/homebrew\/Cellar\/cmake\/3.24.2\/bin\/cmake$/;"	m
CMAKE_COMMAND	math/build/Makefile	/^CMAKE_COMMAND = \/opt\/homebrew\/Cellar\/cmake\/3.24.2\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	math/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/hep\/code\/dsa\/c_cpp\/math$/;"	m
CMAKE_SOURCE_DIR	math/build/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/hep\/code\/dsa\/c_cpp\/math$/;"	m
COMPILER_ID	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION_INTERNAL	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_MAJOR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CXX_STD	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
C_VERSION	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION /;"	d	file:
C_VERSION	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define C_VERSION$/;"	d	file:
C_VERSION	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define C_VERSION /;"	d	file:
Check	lc/back-tracking/eight_queens_rest_method1.cpp	/^int Check(int line, int list) {$/;"	f
Cnk	py/combinatorial_number.py	/^def Cnk(n, k):$/;"	f
Complex	math/高精度计算C++.cpp	/^    Complex(double _x = 0.0, double _y = 0.0) {$/;"	f	struct:Complex
Complex	math/高精度计算C++.cpp	/^struct Complex {$/;"	s	file:
ConutingSort	c_cpp/Sort/Counting_Sort.cpp	/^void ConutingSort(vector<int>& arr) {$/;"	f
CountSort	py/sort_algorithm/Counting_Sort.py	/^def CountSort(A: List[int], w: int) -> List[int]:$/;"	f
CountSort	py/sort_algorithm/Radix_Sort.py	/^def CountSort(A: List[int], bitArr: List[int]) -> List[int]:$/;"	f
Counter	lc/lc-1224.py	/^from collections import Counter, defaultdict$/;"	i
Counter	lc/simulation/lc-2423.py	/^from collections import Counter$/;"	i
Counter	lc/utils1.py	/^from collections import deque, defaultdict, Counter$/;"	i
Counts	lc/back-tracking/eight_queens_rest_method1.cpp	/^int Queenes[8] = {0}, Counts = 0;$/;"	v
DEC	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
Deque	py/data_structure/Deque.py	/^class Deque(object):$/;"	c
DoubleLinkList	py/data_structure/double_link_list.py	/^class DoubleLinkList(object):$/;"	c
DoubleLinkedList	c_cpp/Linked_List/Double_Linked_List.hpp	/^    DoubleLinkedList() : head(nullptr) {}$/;"	f	class:DoubleLinkedList
DoubleLinkedList	c_cpp/Linked_List/Double_Linked_List.hpp	/^    DoubleLinkedList(int head_val) : head(new ListNode(head_val)) {}$/;"	f	class:DoubleLinkedList
DoubleLinkedList	c_cpp/Linked_List/Double_Linked_List.hpp	/^DoubleLinkedList::DoubleLinkedList(int head_val, vector<int> rest) {$/;"	f	class:DoubleLinkedList
DoubleLinkedList	c_cpp/Linked_List/Double_Linked_List.hpp	/^DoubleLinkedList::DoubleLinkedList(vector<int> nodes) {$/;"	f	class:DoubleLinkedList
DoubleLinkedList	c_cpp/Linked_List/Double_Linked_List.hpp	/^class DoubleLinkedList {$/;"	c
Double_Linked_List	c_cpp/Linked_List/Double_Linked_List.hpp	/^#define Double_Linked_List$/;"	d
EPS	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^const double EPS = 1e-6;$/;"	v
EPS	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000-1.cpp	/^const double EPS = 1e-6;$/;"	v
EPS	java/88-1000.java	/^static final double EPS = 1e-6;$/;"	f	class:Main
EQUALS	math/Makefile	/^EQUALS = =$/;"	m
EQUALS	math/build/Makefile	/^EQUALS = =$/;"	m
Eratosthenes	math/sieve-method/Eratosthenes-v1.py	/^def Eratosthenes(n):$/;"	f
Eratosthenes	math/sieve-method/Eratosthenes-v2.py	/^def Eratosthenes(n: int) -> int:$/;"	f
Eratosthenes	math/sieve-method/era-with-numpy.py	/^def Eratosthenes(n, prime):$/;"	f
Exp	math/高精度计算C++.cpp	/^    const static int Exp = 9;$/;"	m	class:BigInt	file:
Find	c_cpp/Graph_Theory/Union_Find_Set.cpp	/^    int Find(int A) {$/;"	f	class:UnionFind
HEX	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
Heap_Sort	c_cpp/Sort/Heap_Sort.cpp	/^void Heap_Sort(vector<int> &arr) {$/;"	f
Heap_Sort	c_cpp/Sort/Heap_Sort_reverse.cpp	/^void Heap_Sort(vector<int> &arr) {$/;"	f
Heap_Sort	c_cpp/Sort/My_Heap_Sort_Iter.cpp	/^void Heap_Sort(vector<int> &arr) {$/;"	f
ID_VOID_MAIN	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
Image	py/1.py	/^from PIL import Image$/;"	i
InsertionSort	c_cpp/Sort/Bucket_Sort.cpp	/^void InsertionSort(vector<int>& A) {$/;"	f
InsertionSort	c_cpp/Sort/Insertion_Sort.cpp	/^void InsertionSort(vector<int> &arr) {$/;"	f
InsertionSort	py/sort_algorithm/Insertion_Sort.py	/^def InsertionSort(a):$/;"	f
InsertionSort1	c_cpp/Sort/Insertion_Sort.cpp	/^void InsertionSort1(vector<int> &arr) {$/;"	f
InsertionSort2	c_cpp/Sort/Insertion_Sort.cpp	/^void InsertionSort2(vector<int> &arr) {$/;"	f
InsertionSort3	c_cpp/Sort/Insertion_Sort.cpp	/^void InsertionSort3(vector<int> &arr) {$/;"	f
KMP	lc/str_/KMP.py	/^def KMP(s1, s2):$/;"	f
LRUCache	c_cpp/Linked_List/lru.cpp	/^    LRUCache(int _capacity) : capacity(_capacity), size(0) {$/;"	f	class:LRUCache
LRUCache	c_cpp/Linked_List/lru.cpp	/^class LRUCache { \/\/ 官方题解版$/;"	c	file:
LRUCache1	c_cpp/Linked_List/lru.cpp	/^    LRUCache1(int _capacity) : capacity(_capacity), size(0) {}$/;"	f	class:LRUCache1
LRUCache1	c_cpp/Linked_List/lru.cpp	/^class LRUCache1 { \/\/ 使用STL的双向链表list容器实现$/;"	c	file:
List	lc/2ptr-slide-window/lc-11.py	/^from typing import List$/;"	i
List	lc/2ptr-slide-window/lc-15-3sum.py	/^from typing import List$/;"	i
List	lc/2ptr-slide-window/lc-16-3sum-closest.py	/^from typing import List$/;"	i
List	lc/2ptr-slide-window/lc-18-4sum.py	/^from typing import List$/;"	i
List	lc/6122.py	/^from typing import List$/;"	i
List	lc/6129.py	/^from typing import List$/;"	i
List	lc/back-tracking/216.py	/^from typing import List$/;"	i
List	lc/back-tracking/332.py	/^from typing import List$/;"	i
List	lc/back-tracking/39.py	/^from typing import List$/;"	i
List	lc/back-tracking/40.py	/^from typing import List$/;"	i
List	lc/back-tracking/46.py	/^from typing import List$/;"	i
List	lc/back-tracking/lc-17-phone-number.py	/^from typing import List$/;"	i
List	lc/back-tracking/lc-46-perm1.py	/^from typing import List$/;"	i
List	lc/back-tracking/lc-47-perm2.py	/^from typing import List$/;"	i
List	lc/back-tracking/lc-77-comb.py	/^from typing import List$/;"	i
List	lc/dfs_bfs/1162.py	/^from typing import List$/;"	i
List	lc/dfs_bfs/542-0-1-mat.py	/^from typing import List$/;"	i
List	lc/diff-arrs/lc-6158.py	/^from typing import List$/;"	i
List	lc/dp_/801.py	/^from typing import List$/;"	i
List	lc/dp_/lc-6143.py	/^from typing import List$/;"	i
List	lc/lc-122-sell-stock-II.py	/^from typing import List$/;"	i
List	lc/lc-1224.py	/^from typing import List$/;"	i
List	lc/lc-22.py	/^from typing import List$/;"	i
List	lc/lc-221.py	/^from typing import List$/;"	i
List	lc/lc-2669.py	/^from typing import List$/;"	i
List	lc/lc-2783-find-2-disappear-numbers.py	/^from typing import List$/;"	i
List	lc/lc-309.py	/^from typing import List$/;"	i
List	lc/lc-313.py	/^from typing import List$/;"	i
List	lc/lc-45.py	/^from typing import List$/;"	i
List	lc/lc-55.py	/^from typing import List$/;"	i
List	lc/lc-593.py	/^from typing import List$/;"	i
List	lc/lc-6142.py	/^from typing import List$/;"	i
List	lc/lc-977-square-sort.py	/^from typing import List$/;"	i
List	lc/str_/KMP.py	/^from typing import List$/;"	i
List	lc/tree-/654-max-bitree.py	/^from typing import List$/;"	i
List	lc/utils1.py	/^from typing import List$/;"	i
List	py/back-tracking/24.py	/^from typing import List$/;"	i
List	py/sort_algorithm/Counting_Sort.py	/^from typing import List$/;"	i
List	py/sort_algorithm/Radix_Sort.py	/^from typing import List$/;"	i
ListNode	c_cpp/Linked_List/Double_Linked_List.hpp	/^    ListNode() : ListNode(0, nullptr, nullptr) {}$/;"	f	class:ListNode
ListNode	c_cpp/Linked_List/Double_Linked_List.hpp	/^    ListNode(int x) : ListNode(x, nullptr, nullptr) {}$/;"	f	class:ListNode
ListNode	c_cpp/Linked_List/Double_Linked_List.hpp	/^    ListNode(int x, ListNode* _next) : ListNode(x, nullptr, _next) {}$/;"	f	class:ListNode
ListNode	c_cpp/Linked_List/Double_Linked_List.hpp	/^    ListNode(int x, ListNode* _prev, ListNode* _next)$/;"	f	class:ListNode
ListNode	c_cpp/Linked_List/Double_Linked_List.hpp	/^class ListNode {$/;"	c
ListNode	c_cpp/Linked_List/Reverse_Singly_linked_list.cpp	/^    ListNode(int x) : val(x), next(NULL) {}$/;"	f	struct:ListNode
ListNode	c_cpp/Linked_List/Reverse_Singly_linked_list.cpp	/^struct ListNode {$/;"	s	file:
ListNode	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^    ListNode() : ListNode(0, nullptr, nullptr) {}$/;"	f	class:ListNode
ListNode	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^    ListNode(int x) : ListNode(x, nullptr, nullptr) {}$/;"	f	class:ListNode
ListNode	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^    ListNode(int x, ListNode* _next) : ListNode(x, nullptr, _next) {}$/;"	f	class:ListNode
ListNode	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^    ListNode(int x, ListNode* _prev, ListNode* _next)$/;"	f	class:ListNode
ListNode	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^class ListNode {$/;"	c
ListNode	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^    ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^    ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^    ListNode(int x, ListNode* _next) : val(x), next(_next) {}$/;"	f	struct:ListNode
ListNode	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^struct ListNode {$/;"	s
ListNode	c_cpp/Linked_List/Single_Linked_List.hpp	/^    ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	c_cpp/Linked_List/Single_Linked_List.hpp	/^    ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	c_cpp/Linked_List/Single_Linked_List.hpp	/^    ListNode(int x, ListNode* next1) : val(x), next(next1) {}$/;"	f	struct:ListNode
ListNode	c_cpp/Linked_List/Single_Linked_List.hpp	/^struct ListNode {$/;"	s
ListNode	lc/lc-92.cpp	/^    ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	lc/lc-92.cpp	/^    ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	lc/lc-92.cpp	/^    ListNode(int x, ListNode *next) : val(x), next(next) {}$/;"	f	struct:ListNode
ListNode	lc/lc-92.cpp	/^struct ListNode {$/;"	s	file:
ListNode	lc/linked-list-/24.cpp	/^    ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	lc/linked-list-/24.cpp	/^    ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	lc/linked-list-/24.cpp	/^    ListNode(int x, ListNode* next1) : val(x), next(next1) {}$/;"	f	struct:ListNode
ListNode	lc/linked-list-/24.cpp	/^struct ListNode {$/;"	s	file:
ListNode	lc/test-cpp/LinkedList.cpp	/^    ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	lc/test-cpp/LinkedList.cpp	/^    ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	lc/test-cpp/LinkedList.cpp	/^    ListNode(int x, ListNode *next) : val(x), next(next) {}$/;"	f	struct:ListNode
ListNode	lc/test-cpp/LinkedList.cpp	/^struct ListNode {$/;"	s	file:
MAX	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^int BinarySearchTree::MAX() { return maximum(root)->val; }$/;"	f	class:BinarySearchTree
MAX	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^int RedBlackTree::MAX() { return maximum(root)->val; }$/;"	f	class:RedBlackTree
MAXN	c_cpp/union-find-set.cpp	/^const int MAXN = 10000;$/;"	v
MAXN	py/find-and-union-set/find-union-set.py	/^MAXN = 10$/;"	v
MAX_BOARDSIZE	lc/back-tracking/n-queens.c	/^const int MAX_BOARDSIZE = 18;$/;"	v
MAX_LEVEL	c_cpp/Linked_List/Skip_List.cpp	/^constexpr int MAX_LEVEL = 8; \/\/ 遵循Redis的zset数据结构的取法$/;"	v
MIN	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^int BinarySearchTree::MIN() { return minimum(root)->val; }$/;"	f	class:BinarySearchTree
MIN	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^int RedBlackTree::MIN() { return minimum(root)->val; }$/;"	f	class:RedBlackTree
MIN_BOARDSIZE	lc/back-tracking/n-queens.c	/^const int MIN_BOARDSIZE = 2;$/;"	v
MOD	lc/1801-priority-queue-simulation-1.cpp	/^constexpr int MOD = 1e9 + 7;$/;"	v
Main	java/88-1000.java	/^public class Main {$/;"	c
Max_Heapify	c_cpp/Sort/Heap_Sort.cpp	/^void Max_Heapify(vector<int> &arr, int len, int i) {$/;"	f
Max_Heapify	c_cpp/Sort/My_Heap_Sort_Iter.cpp	/^void Max_Heapify(vector<int> &arr, int len, int i) {$/;"	f
Max_Heapify_iter1	c_cpp/Sort/My_Heap_Sort_Iter.cpp	/^void Max_Heapify_iter1(vector<int> &arr, int len, int i) {$/;"	f
Max_Heapify_recur	c_cpp/Sort/My_Heap_Sort_Iter.cpp	/^void Max_Heapify_recur(vector<int> &arr, int len, int i) {$/;"	f
Merge	c_cpp/Sort/Merge_Sort.cpp	/^void Merge(int arr[], int p, int q, int r) {$/;"	f
MergeSort	c_cpp/Sort/Merge_Sort.cpp	/^void MergeSort(vector<int> &arr) {$/;"	f
MergeSort1	c_cpp/Sort/Merge_Sort.cpp	/^void MergeSort1(vector<int> &arr, int L, int R) {$/;"	f
MergeSort2	c_cpp/Sort/Merge_Sort.cpp	/^void MergeSort2(vector<int> &arr) {$/;"	f
Min_Heapify	c_cpp/Sort/Heap_Sort_reverse.cpp	/^void Min_Heapify(vector<int> &arr, int len, int i) {$/;"	f
Mod	math/高精度计算C++.cpp	/^    const static Long Mod = 1000000000;$/;"	m	class:BigInt	file:
N	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^const int N = 8;$/;"	v
N	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^const int N = 8;$/;"	v
N	lc/back-tracking/eight_queens.cpp	/^#define N /;"	d	file:
NEXT1	lc/str_/KMP.py	/^def NEXT1(s: str) -> List[int]:$/;"	f
NEXT2	lc/str_/KMP.py	/^def NEXT2(s: str) -> List[int]:$/;"	f
NUM	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000-1.cpp	/^const int NUM = 8;$/;"	v
NUM	java/88-1000.java	/^static final int NUM = 8;$/;"	f	class:Main
NUMBER	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^#define NUMBER /;"	d	file:
Node	c_cpp/Linked_List/Skip_List.cpp	/^        Node(int _val, int _max_level = MAX_LEVEL)$/;"	f	struct:Skiplist::Node
Node	c_cpp/Linked_List/Skip_List.cpp	/^    struct Node {$/;"	s	class:Skiplist	file:
Node	c_cpp/Linked_List/lru.cpp	/^        Node() : key(0), value(0), prev(nullptr), next(nullptr) {}$/;"	f	struct:LRUCache::Node
Node	c_cpp/Linked_List/lru.cpp	/^        Node(int _key, int _val)$/;"	f	struct:LRUCache::Node
Node	c_cpp/Linked_List/lru.cpp	/^    struct Node {$/;"	s	class:LRUCache	file:
Node	py/data_structure/AVL_tree.py	/^class Node(object):$/;"	c
Node	py/data_structure/Red-Black-tree.py	/^class Node(object):$/;"	c
Node	py/data_structure/binary-search-tree.py	/^class Node(object):$/;"	c
Node	py/data_structure/binary_Tree.py	/^class Node(object):$/;"	c
Node	py/data_structure/double_link_list.py	/^class Node(object):$/;"	c
Node	py/data_structure/single_cycle_link_list.py	/^class Node(object):$/;"	c
Node	py/data_structure/single_link_list.py	/^class Node(object):$/;"	c
Nqueen	lc/back-tracking/n-queens.c	/^void Nqueen(int board_size) {$/;"	f
PI	math/高精度计算C++.cpp	/^const double PI = acos(-1.0);$/;"	v
PLATFORM_ID	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
P_FACTOR	c_cpp/Linked_List/Skip_List.cpp	/^constexpr double P_FACTOR = 0.25; \/\/ 每4个元素抽取一个元素分层(作为上一层的节点)$/;"	v
Partition	c_cpp/Sort/Quick_Sort_CLRS.cpp	/^int Partition(vector<int> &arr, int l, int r) {$/;"	f
Partition	py/sort_algorithm/Quick_Sort.py	/^def Partition(R: list, m: int, n: int) -> int:$/;"	f
Partition1	c_cpp/Sort/Quick_Sort_CLRS.cpp	/^int Partition1(vector<int> &arr, int l, int r) {$/;"	f
Partition2	c_cpp/Sort/Quick_Sort_CLRS.cpp	/^int Partition2(vector<int> &arr, int l, int r) {$/;"	f
Queenes	lc/back-tracking/eight_queens_rest_method1.cpp	/^int Queenes[8] = {0}, Counts = 0;$/;"	v
Queue	py/data_structure/Queue.py	/^class Queue(object):$/;"	c
Queue2stack	py/data_structure/Queue_by_2_stack.py	/^class Queue2stack(object):$/;"	c
QuickSort	c_cpp/Sort/Quick_Sort.cpp	/^void QuickSort(int arr[], int L, int R) {$/;"	f
QuickSort	c_cpp/Sort/Quick_Sort_CLRS.cpp	/^void QuickSort(vector<int> &arr) {$/;"	f
QuickSort	py/sort_algorithm/Quick_Sort.py	/^def QuickSort(R, m, n):$/;"	f
QuickSort1	c_cpp/Sort/Quick_Sort_CLRS.cpp	/^void QuickSort1(vector<int> &arr, int l, int r) {$/;"	f
QuickSort2	c_cpp/Sort/Quick_Sort_CLRS.cpp	/^void QuickSort2(vector<int> &arr) {$/;"	f
RBT	py/data_structure/Red-Black-tree.py	/^class RBT(object):$/;"	c
RBTREE	c_cpp/Binary_Tree/rbt.h	/^#define RBTREE$/;"	d
RBTreeNode	c_cpp/Binary_Tree/rbt.h	/^    RBTreeNode() : RBTreeNode(0, nullptr, nullptr, true) {}$/;"	f	struct:RBTreeNode
RBTreeNode	c_cpp/Binary_Tree/rbt.h	/^    RBTreeNode(int val1, RBTreeNode* l1, RBTreeNode* r1, bool c1)$/;"	f	struct:RBTreeNode
RBTreeNode	c_cpp/Binary_Tree/rbt.h	/^    RBTreeNode(int x) : RBTreeNode(x, nullptr, nullptr, true) {}$/;"	f	struct:RBTreeNode
RBTreeNode	c_cpp/Binary_Tree/rbt.h	/^    RBTreeNode(int x, RBTreeNode* l1, RBTreeNode* r1)$/;"	f	struct:RBTreeNode
RBTreeNode	c_cpp/Binary_Tree/rbt.h	/^    RBTreeNode(int x, bool c1) : RBTreeNode(x, nullptr, nullptr, c1) {}$/;"	f	struct:RBTreeNode
RBTreeNode	c_cpp/Binary_Tree/rbt.h	/^struct RBTreeNode {$/;"	s
RM	math/Makefile	/^RM = \/opt\/homebrew\/Cellar\/cmake\/3.24.2\/bin\/cmake -E rm -f$/;"	m
RM	math/build/Makefile	/^RM = \/opt\/homebrew\/Cellar\/cmake\/3.24.2\/bin\/cmake -E rm -f$/;"	m
RadixSort	c_cpp/Sort/Radix_Sort.cpp	/^void RadixSort(vector<int>& arr) {$/;"	f
RadixSort	py/sort_algorithm/Radix_Sort.py	/^def RadixSort(arr: List[int]) -> List[int]:$/;"	f
Rational	py/class_rational_number.py	/^class Rational(object):$/;"	c
RedBlackTree	c_cpp/Binary_Tree/rbt.h	/^    RedBlackTree() : root(nullptr) {}$/;"	f	class:RedBlackTree
RedBlackTree	c_cpp/Binary_Tree/rbt.h	/^class RedBlackTree {$/;"	c
RingDoubleLinkedList	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^    RingDoubleLinkedList() : head(nullptr) {}$/;"	f	class:RingDoubleLinkedList
RingDoubleLinkedList	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^    RingDoubleLinkedList(int head_val) : head(new ListNode(head_val)) {$/;"	f	class:RingDoubleLinkedList
RingDoubleLinkedList	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^RingDoubleLinkedList::RingDoubleLinkedList(int head_val, vector<int> rest) {$/;"	f	class:RingDoubleLinkedList
RingDoubleLinkedList	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^RingDoubleLinkedList::RingDoubleLinkedList(vector<int> nodes) {$/;"	f	class:RingDoubleLinkedList
RingDoubleLinkedList	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^class RingDoubleLinkedList {$/;"	c
RingSingleLinkedList	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^    RingSingleLinkedList() : head(nullptr) {}$/;"	f	class:RingSingleLinkedList
RingSingleLinkedList	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^    RingSingleLinkedList(int head_val) : head(new ListNode(head_val)) {$/;"	f	class:RingSingleLinkedList
RingSingleLinkedList	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^RingSingleLinkedList::RingSingleLinkedList(int head_val, vector<int> rest) {$/;"	f	class:RingSingleLinkedList
RingSingleLinkedList	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^RingSingleLinkedList::RingSingleLinkedList(vector<int> nodes) {$/;"	f	class:RingSingleLinkedList
RingSingleLinkedList	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^class RingSingleLinkedList {$/;"	c
Ring_Double_Linked_List	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^#define Ring_Double_Linked_List$/;"	d
Ring_Single_Linked_List	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^#define Ring_Single_Linked_List$/;"	d
SHELL	math/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	math/build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SOLUTIONTYPE	lc/back-tracking/n-queens.c	/^typedef unsigned long SOLUTIONTYPE;$/;"	t	file:
STRINGIFY	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
SelectSort	c_cpp/Sort/Select_Sort.cpp	/^void SelectSort(vector<int> &arr) {$/;"	f
SelectSort	py/sort_algorithm/Select_Sort.py	/^def SelectSort(a):$/;"	f
SelectSort1	c_cpp/Sort/Select_Sort.cpp	/^void SelectSort1(vector<int> &arr) {$/;"	f
SelectSort2	c_cpp/Sort/Select_Sort.cpp	/^void SelectSort2(vector<int> &arr) {$/;"	f
ShellSort	c_cpp/Sort/Shell_Sort.cpp	/^void ShellSort(vector<int>& arr) {$/;"	f
ShellSort	py/sort_algorithm/Shell_Sort.py	/^def ShellSort(a):$/;"	f
SingleCycleLinkList	py/data_structure/single_cycle_link_list.py	/^class SingleCycleLinkList(object):$/;"	c
SingleLinkList	py/data_structure/single_link_list.py	/^class SingleLinkList(object):$/;"	c
SingleLinkedList	c_cpp/Linked_List/Single_Linked_List.hpp	/^    SingleLinkedList() : head(nullptr) {}$/;"	f	class:SingleLinkedList
SingleLinkedList	c_cpp/Linked_List/Single_Linked_List.hpp	/^    SingleLinkedList(int head_val) : head(new ListNode(head_val)) {}$/;"	f	class:SingleLinkedList
SingleLinkedList	c_cpp/Linked_List/Single_Linked_List.hpp	/^SingleLinkedList::SingleLinkedList(int head_val, vector<int> rest) {$/;"	f	class:SingleLinkedList
SingleLinkedList	c_cpp/Linked_List/Single_Linked_List.hpp	/^SingleLinkedList::SingleLinkedList(vector<int> nodes) {$/;"	f	class:SingleLinkedList
SingleLinkedList	c_cpp/Linked_List/Single_Linked_List.hpp	/^class SingleLinkedList {$/;"	c
Single_Linked_List	c_cpp/Linked_List/Single_Linked_List.hpp	/^#define Single_Linked_List$/;"	d
Skiplist	c_cpp/Linked_List/Skip_List.cpp	/^    Skiplist() : head(new Node(-1)), level(0), dis(0, 1) {}$/;"	f	class:Skiplist
Skiplist	c_cpp/Linked_List/Skip_List.cpp	/^class Skiplist {$/;"	c	file:
Solution	c_cpp/back-tracking/24-8-8-1000/24-pt.cpp	/^class Solution {$/;"	c	file:
Solution	c_cpp/dp/0-1-bag.cpp	/^class Solution {$/;"	c	file:
Solution	lc/1801-priority-queue-simulation-1.cpp	/^class Solution {$/;"	c	file:
Solution	lc/2ptr-slide-window/lc-11.py	/^class Solution:$/;"	c
Solution	lc/2ptr-slide-window/lc-15-3sum.py	/^class Solution:$/;"	c
Solution	lc/2ptr-slide-window/lc-16-3sum-closest.py	/^class Solution:$/;"	c
Solution	lc/2ptr-slide-window/lc-18-4sum.py	/^class Solution:$/;"	c
Solution	lc/2ptr-slide-window/spiral-mat/1.cpp	/^class Solution {$/;"	c	file:
Solution	lc/2ptr-slide-window/spiral-mat/3.cpp	/^class Solution {$/;"	c	file:
Solution	lc/6122.py	/^class Solution:$/;"	c
Solution	lc/6129.py	/^class Solution:$/;"	c
Solution	lc/back-tracking/216.py	/^class Solution:$/;"	c
Solution	lc/back-tracking/24-point.cpp	/^class Solution {$/;"	c	file:
Solution	lc/back-tracking/332.py	/^class Solution:$/;"	c
Solution	lc/back-tracking/377-combination4.cpp	/^class Solution {$/;"	c	file:
Solution	lc/back-tracking/39.py	/^class Solution:$/;"	c
Solution	lc/back-tracking/40.py	/^class Solution:$/;"	c
Solution	lc/back-tracking/46.cpp	/^class Solution {$/;"	c	file:
Solution	lc/back-tracking/46.py	/^class Solution:$/;"	c
Solution	lc/back-tracking/51-nqueens.cpp	/^class Solution {$/;"	c	file:
Solution	lc/back-tracking/93-ip.cpp	/^class Solution {$/;"	c	file:
Solution	lc/back-tracking/lc-17-phone-number.py	/^class Solution:$/;"	c
Solution	lc/back-tracking/lc-46-perm1.py	/^class Solution:$/;"	c
Solution	lc/back-tracking/lc-47-perm2.py	/^class Solution:$/;"	c
Solution	lc/back-tracking/lc-77-comb.py	/^class Solution:$/;"	c
Solution	lc/dfs_bfs/1162.py	/^class Solution:$/;"	c
Solution	lc/dfs_bfs/542-0-1-mat.py	/^class Solution:$/;"	c
Solution	lc/diff-arrs/lc-6158.py	/^class Solution:$/;"	c
Solution	lc/dp_/801.py	/^class Solution:$/;"	c
Solution	lc/dp_/lc-6143.py	/^class Solution:$/;"	c
Solution	lc/hash-table/1604.cpp	/^class Solution {$/;"	c	file:
Solution	lc/hash-table/2936.cpp	/^class Solution {$/;"	c	file:
Solution	lc/hash-table/lc-128.py	/^class Solution:$/;"	c
Solution	lc/hash-table/lc-1941.cpp	/^class Solution {$/;"	c	file:
Solution	lc/lc-122-sell-stock-II.py	/^class Solution:$/;"	c
Solution	lc/lc-1224.py	/^class Solution:$/;"	c
Solution	lc/lc-200-island-count.cpp	/^class Solution {$/;"	c	file:
Solution	lc/lc-22.py	/^class Solution:$/;"	c
Solution	lc/lc-221.py	/^class Solution:$/;"	c
Solution	lc/lc-233.py	/^class Solution:$/;"	c
Solution	lc/lc-2669.py	/^class Solution:$/;"	c
Solution	lc/lc-2783-find-2-disappear-numbers.py	/^class Solution:$/;"	c
Solution	lc/lc-300.py	/^class Solution:$/;"	c
Solution	lc/lc-309.py	/^class Solution:$/;"	c
Solution	lc/lc-313.py	/^class Solution:$/;"	c
Solution	lc/lc-45.py	/^class Solution:$/;"	c
Solution	lc/lc-5.py	/^class Solution:$/;"	c
Solution	lc/lc-55.py	/^class Solution:$/;"	c
Solution	lc/lc-592-frac-plus-minus.py	/^class Solution:$/;"	c
Solution	lc/lc-593.py	/^class Solution:$/;"	c
Solution	lc/lc-6.py	/^class Solution:$/;"	c
Solution	lc/lc-6121.py	/^class Solution:$/;"	c
Solution	lc/lc-6142.py	/^class Solution:$/;"	c
Solution	lc/lc-64.py	/^class Solution:$/;"	c
Solution	lc/lc-640-solve-equation.py	/^class Solution:$/;"	c
Solution	lc/lc-91.py	/^class Solution:$/;"	c
Solution	lc/lc-92.cpp	/^class Solution {$/;"	c	file:
Solution	lc/lc-97-interleaving-string.py	/^class Solution:$/;"	c
Solution	lc/lc-977-square-sort.py	/^class Solution:$/;"	c
Solution	lc/linked-list-/24.cpp	/^class Solution {$/;"	c	file:
Solution	lc/math/50.py	/^class Solution:$/;"	c
Solution	lc/simulation/lc-2423.py	/^class Solution:$/;"	c
Solution	lc/tree-/654-max-bitree.py	/^class Solution:$/;"	c
Solution	py/back-tracking/24.py	/^class Solution:$/;"	c
Solution	py/eight_queen.py	/^class Solution:$/;"	c
SortedList	lc/utils1.py	/^from sortedcontainers import SortedList$/;"	i
Stack	py/data_structure/Stack.py	/^class Stack(object):$/;"	c
Stack	py/data_structure/Stack_by_2_Queue.py	/^class Stack(object):$/;"	c
TARGET	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^const int TARGET = 1000;$/;"	v
TARGET	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000-1.cpp	/^const int TARGET = 1000;$/;"	v
TARGET	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^const int TARGET = 1000;$/;"	v
TARGET	java/88-1000.java	/^static final int TARGET = 1000;$/;"	f	class:Main
Timer	py/data_structure/timeit_list.py	/^from timeit import Timer$/;"	i
TopSort	c_cpp/Sort/Topology_Sort.cpp	/^bool TopSort(vector<vector<int>> &G, int n, vector<int> &inDegree) {$/;"	f
TreeNode	c_cpp/Binary_Tree/bt.h	/^    TreeNode() : val(0), left(nullptr), right(nullptr) {}$/;"	f	struct:TreeNode
TreeNode	c_cpp/Binary_Tree/bt.h	/^    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}$/;"	f	struct:TreeNode
TreeNode	c_cpp/Binary_Tree/bt.h	/^    TreeNode(int x, TreeNode* left1, TreeNode* right1)$/;"	f	struct:TreeNode
TreeNode	c_cpp/Binary_Tree/bt.h	/^struct TreeNode {$/;"	s
TreeNode	lc/tree-/654-max-bitree.py	/^class TreeNode:$/;"	c
Union	c_cpp/Graph_Theory/Union_Find_Set.cpp	/^    void Union(int A, int B) {$/;"	f	class:UnionFind
UnionFind	c_cpp/Graph_Theory/Union_Find_Set.cpp	/^    UnionFind(int size) : parents(size) {$/;"	f	class:UnionFind
UnionFind	c_cpp/Graph_Theory/Union_Find_Set.cpp	/^class UnionFind {$/;"	c	file:
Value	math/高精度计算C++.cpp	/^#define Value(/;"	d	file:
__has_include	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^#  define __has_include(/;"	d	file:
__has_include	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define __has_include(/;"	d	file:
__init__	lc/tree-/654-max-bitree.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:TreeNode
__init__	py/class_rational_number.py	/^    def __init__(self, num, den=1):$/;"	m	class:Rational
__init__	py/data_structure/AVL_tree.py	/^    def __init__(self):$/;"	m	class:BinarySearchTree
__init__	py/data_structure/AVL_tree.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:Node
__init__	py/data_structure/Deque.py	/^    def __init__(self):$/;"	m	class:Deque
__init__	py/data_structure/Queue.py	/^    def __init__(self):$/;"	m	class:Queue
__init__	py/data_structure/Queue_by_2_stack.py	/^    def __init__(self):$/;"	m	class:Queue2stack
__init__	py/data_structure/Red-Black-tree.py	/^    def __init__(self):$/;"	m	class:RBT
__init__	py/data_structure/Red-Black-tree.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:Node
__init__	py/data_structure/Stack.py	/^    def __init__(self):$/;"	m	class:Stack
__init__	py/data_structure/Stack_by_2_Queue.py	/^    def __init__(self):$/;"	m	class:Stack
__init__	py/data_structure/binary-search-tree.py	/^    def __init__(self):$/;"	m	class:BinarySearchTree
__init__	py/data_structure/binary-search-tree.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:Node
__init__	py/data_structure/binary_Tree.py	/^    def __init__(self):$/;"	m	class:BinaryTree
__init__	py/data_structure/binary_Tree.py	/^    def __init__(self, val=0, left=None, right=None):$/;"	m	class:Node
__init__	py/data_structure/double_link_list.py	/^    def __init__(self, elem):$/;"	m	class:Node
__init__	py/data_structure/double_link_list.py	/^    def __init__(self, node=None):$/;"	m	class:DoubleLinkList
__init__	py/data_structure/single_cycle_link_list.py	/^    def __init__(self, elem):$/;"	m	class:Node
__init__	py/data_structure/single_cycle_link_list.py	/^    def __init__(self, node=None):$/;"	m	class:SingleCycleLinkList
__init__	py/data_structure/single_link_list.py	/^    def __init__(self, elem=0):$/;"	m	class:Node
__init__	py/data_structure/single_link_list.py	/^    def __init__(self, node=None):$/;"	m	class:SingleLinkList
_gcd	py/class_rational_number.py	/^    def _gcd(m, n):$/;"	m	class:Rational
_search	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^BSTreeNode *BinarySearchTree::_search(BSTreeNode *x, int target) {$/;"	f	class:BinarySearchTree
_search	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^RBTreeNode *RedBlackTree::_search(RBTreeNode *x, int target) {$/;"	f	class:RedBlackTree
a	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^item a[N];$/;"	v
a	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^item a[N];$/;"	v
a	lc/lc-1089-duplicate_zero.py	/^    a = [1, 0, 2, 3, 0, 4, 5, 0]$/;"	v
a	lc/lc-6142.py	/^a	v
a	py/sort_algorithm/Bubble_Sort.py	/^a = [54, 26, 93, 17, 77, 31, 44, 55, 20]$/;"	v
a	py/sort_algorithm/Insertion_Sort.py	/^a = [54, 26, 93, 17, 77, 31, 44, 55, 20]$/;"	v
a	py/sort_algorithm/Quick_Sort.py	/^a = [54, 26, 93, 17, 77, 31, 44, 55, 20]$/;"	v
a	py/sort_algorithm/Select_Sort.py	/^a = [54, 26, 93, 17, 77, 31, 44, 55, 20]$/;"	v
a	py/sort_algorithm/Shell_Sort.py	/^a = [54, 26, 93, 17, 77, 31, 44, 55, 20]$/;"	v
a1	py/sort_algorithm/Counting_Sort.py	/^    a1 = [3, 3, 2, 2, 1, 4, 5, 5, 7, 0]$/;"	v
a1	py/sort_algorithm/Radix_Sort.py	/^    a1 = [53, 3, 542, 750, 14, 214, 154, 63, 612]$/;"	v
aa	lc/6129.py	/^aa = s.zeroFilledSubarray(nums)$/;"	v
aa	lc/lc-1111.py	/^def aa(nums):$/;"	f
abc	lc/str_/KMP.py	/^from string import ascii_lowercase as abc$/;"	i
absComp	math/高精度计算C++.cpp	/^    static int absComp(const BigInt &lhs, const BigInt &rhs) {$/;"	f	class:BigInt	file:
accumulate	lc/diff-arrs/lc-6158.py	/^from itertools import accumulate$/;"	i
add	c_cpp/Linked_List/Skip_List.cpp	/^    void add(int num) {$/;"	f	class:Skiplist
add	py/data_structure/AVL_tree.py	/^    def add(self, item):$/;"	m	class:BinarySearchTree
add	py/data_structure/Red-Black-tree.py	/^    def add(self, item):$/;"	m	class:RBT
add	py/data_structure/binary-search-tree.py	/^    def add(self, item):$/;"	m	class:BinarySearchTree
add	py/data_structure/binary_Tree.py	/^    def add(self, item):$/;"	m	class:BinaryTree
add	py/data_structure/double_link_list.py	/^    def add(self, item):$/;"	m	class:DoubleLinkList
add	py/data_structure/single_cycle_link_list.py	/^    def add(self, item):$/;"	m	class:SingleCycleLinkList
add	py/data_structure/single_link_list.py	/^    def add(self, item):$/;"	m	class:SingleLinkList
add2head	c_cpp/Linked_List/Double_Linked_List.hpp	/^void DoubleLinkedList::add2head(int val) { insert(0, val); }$/;"	f	class:DoubleLinkedList
add2head	c_cpp/Linked_List/Single_Linked_List.hpp	/^void SingleLinkedList::add2head(int val) { insert(0, val); }$/;"	f	class:SingleLinkedList
addToHead	c_cpp/Linked_List/lru.cpp	/^    void addToHead(Node *node) {$/;"	f	class:LRUCache
add_front	py/data_structure/Deque.py	/^    def add_front(self, item):$/;"	m	class:Deque
add_iter	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::add_iter(int item) {$/;"	f	class:BinaryTree
add_rear	py/data_structure/Deque.py	/^    def add_rear(self, item):$/;"	m	class:Deque
add_recur1	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::add_recur1() {$/;"	f	class:BinaryTree
add_recur2	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::add_recur2(vector<int>& item) {$/;"	f	class:BinaryTree
alertNames	lc/hash-table/1604.cpp	/^    vector<string> alertNames(vector<string> &keyName,$/;"	f	class:Solution
ans	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000-1.cpp	/^set<string> ans;$/;"	v
ans	java/88-1000.java	/^static Set<String> ans = new HashSet<String>();$/;"	f	class:Main
ans	lc/back-tracking/eight_queens_rest_method2.cpp	/^int x1[maxn], x2[maxn], ans, n;$/;"	v
ans	lc/lc-22.py	/^    ans = {}$/;"	v	class:Solution
ans	lc/lc-593.py	/^    ans = s.validSquare([0, 0], [0, 1], [1, 0], [1, 10])$/;"	v	class:Solution
ans	lc/lc-593.py	/^    ans = s.validSquare([0, 0], [1, 0], [0, 1], [1, 1])$/;"	v	class:Solution
ans	lc/lc-593.py	/^    ans = s.validSquare([0, 0], [1, 1], [1, 0], [0, 1])$/;"	v	class:Solution
ans	lc/lc-593.py	/^    ans = s.validSquare([1, 0], [-1, 0], [0, 1], [0, -1])$/;"	v	class:Solution
ans	lc/lc-64.py	/^    ans = s([[1, 2, 3], [4, 5, 6]])$/;"	v	class:Solution
ans	lc/lc-64.py	/^    ans = s([[1, 3, 1], [1, 5, 1], [4, 2, 1]])$/;"	v	class:Solution
ans	lc/lc-97-interleaving-string.py	/^    ans = s.isInterleave("a", "c", "ca")$/;"	v	class:Solution
ans	lc/lc-97-interleaving-string.py	/^    ans = s.isInterleave(s1="aabcc", s2="dbbca", s3="aadbbbaccc")$/;"	v	class:Solution
ans	lc/lc-97-interleaving-string.py	/^    ans = s.isInterleave(s1="aabcc", s2="dbbca", s3="aadbbcbcac")$/;"	v	class:Solution
ans	lc/lc-97-interleaving-string.py	/^    ans = s.isInterleave(s1="abc", s2="abc", s3="aabbcc")$/;"	v	class:Solution
ans	py/math/digits-1.py	/^    ans = int(c) + ans * 10$/;"	v
ans	py/math/digits-1.py	/^ans = 0$/;"	v
append	c_cpp/Linked_List/Double_Linked_List.hpp	/^void DoubleLinkedList::append(int val) { insert(len(), val); }$/;"	f	class:DoubleLinkedList
append	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^void RingDoubleLinkedList::append(int val) { insert(0, val); }$/;"	f	class:RingDoubleLinkedList
append	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^void RingSingleLinkedList::append(int val) { insert(0, val); }$/;"	f	class:RingSingleLinkedList
append	c_cpp/Linked_List/Single_Linked_List.hpp	/^void SingleLinkedList::append(int val) { insert(len(), val); }$/;"	f	class:SingleLinkedList
append	math/sieve-method/era-with-numpy.py	/^from numpy import array, int64, bool8, append$/;"	i
append	py/data_structure/double_link_list.py	/^    def append(self, item):$/;"	m	class:DoubleLinkList
append	py/data_structure/single_cycle_link_list.py	/^    def append(self, item):$/;"	m	class:SingleCycleLinkList
append	py/data_structure/single_link_list.py	/^    def append(self, item):$/;"	m	class:SingleLinkList
areOccurrencesEqual	lc/hash-table/lc-1941.cpp	/^    bool areOccurrencesEqual(string s) {$/;"	f	class:Solution
arr	py/1.py	/^arr = np.array(img)$/;"	v
arr	py/data_structure/monotonous_stack.py	/^arr = [2, 5, 3, 6, 8, 4, 7, 1]$/;"	v
arr	py/sort_algorithm/quick_sort-gpt.py	/^arr = [5, 3, 7, 1, 9, 2, 8, 4, 6]$/;"	v
arr	py/sort_algorithm/quick_sort-gpt.py	/^arr = quick_sort(arr)$/;"	v
array	math/sieve-method/era-with-numpy.py	/^from numpy import array, int64, bool8, append$/;"	i
ascii_lowercase	lc/diff-arrs/lc-6158.py	/^from string import ascii_lowercase$/;"	i
ascii_lowercase	lc/utils1.py	/^from string import ascii_lowercase, digits$/;"	i
asteroidCollision	lc/test-lc-735.cc	/^vector<int> asteroidCollision(vector<int>& asteroids) {$/;"	f
ba	math/高精度计算C++.cpp	/^BigInt ba, bb;$/;"	v
back	math/高精度计算C++.cpp	/^    Long &back() const { return val.back(); }$/;"	f	class:BigInt	file:
backtrack	lc/back-tracking/216.py	/^        def backtrack(start):$/;"	f	function:Solution.combinationSum3
backtrack	lc/back-tracking/lc-46-perm1.py	/^        def backtrack(nums, used):$/;"	f	function:Solution.permute
backtrack	lc/back-tracking/lc-47-perm2.py	/^        def backtrack(nums, used):$/;"	f	function:Solution.permuteUnique
backtrack	lc/back-tracking/lc-77-comb.py	/^        def backtrack(start):$/;"	f	function:Solution.combine
backtracking	lc/back-tracking/332.py	/^        def backtracking(start_point):$/;"	f	function:Solution.findItinerary
bb	lc/lc-45.py	/^bb=[851,472,733,502,610,761,8,984,977,52,347,90,101,733,505,70,930,176,461,337,645,269,870,291,500,71,11,28,366,840,331,40,803,240,491,732,345,344,258,677,861,744,265,640,558,58,697,928,63,598,743,844,938,854,59,139,618,52,988,78,878,12,368,920,837,245,454,767,155,182,599,835,232,22,684,559,779,171,64,130,491,722,138,272,76,160,841,614,38,985,242,63,240,218,61,442,772,953,280,314,145,644,486,660,236,120,61,923,815,474,928,662,564,541,52,476,992,256,952,796,555,115,545,950,945,618,819,339,537,134,38,303,453,437,178,858,976,786,358,237,158,206,79,570,975,946,262,411,882,920,27,622,226,348,427,339,12,768,898,13,971,554,428,144,325,424,248,217,92,520,810,740,383,962,691,915,113,688,232,896,378,569,365,483,73,971,59,125,411,241,121,68,999,331,960,759,732,419,453,890,836,40,963,803,868,495,93,853,846,885,572,326,344,429,221,502,503,85,131,310,954,699,284,800,831,819,512,752,538,955,175,306,297,75,603,881,843,900,227,162,119,995,873,801,623,911,835,841,724,774,202,274,406,267,98,856,901,453,977,919,573,71,110,161,108,368,509,363,569,166,157,377,375,902,461,79,632,487,30,16,891,632,88,501,134,54,977,394,709,753,389,814,813,681,720,711,52,487,768,144,719,236,639,437,15,389,602,724,8,809,954,455,684,349,740,718,874,613,597,288,385,204,857,885,316,255,868,460,993,617,925,56,731,776,291,903,439,812,497,330,952,893,619,958,815,300,304,778,95,676,962,547,737,552,213,580,799,59,167,895,972,798,811,643,220,780,518,579,71,368,861,2,74,209,371,8,448,646,939,149,353,884,679,870,835,960,21,1000,363,323,370,284,916,64,873,111,439,689,981,749,533,844,262,990,456,864,82,843,706,45,82,826,927,480,759,976,134,585,977,596,103,457,458,978,279,19,143,502,188,31,838,588,610,158,16,635,650,41,30,341,190,556,77,25,642,891,189,945,935,434,654,967,791,721,950,426,949,994,371,740,424,401,218,254,335,449,547,825,795,187,661,998,867,201,416,132,783,290,905,204,555,430,473,463,964,365,127,687,345,185,911,903,603,920,569,324,31,502,622,113,541,778,923,185,846,712,348,596,138,776,685,32,38,616,567,696,487,99,845,578,690,119,612,532,981,435,430,710,584,482,245,321,986,787,239,81,78,359,7,51,219,422,19,80,334,315,739,602,692,701,592,598,343,20,559,519,598,314,675,817,931,778,857,963,206,929,272,562,524,167,225,199,995,902,387,254,655,955,520,633,171,693,438,314,412,116,353,854,575,981,925,122,500,791,195,223,494,514,316,842,395,597,451,505,963,983,166,574,820,180,233,207,255,354,291,290,982,818,465,935,918,165,757,743,181,419,628,442,683,511,917,477,853,560,853,263,240,443,995,55,687,30,618,62,826,589,684,694,568,731,22,937,769,873,357,182,566,326,863,127,44,866,395,204,191,230,113,920,461,566,51,865,198,230,966,901,612,177,507,559,838,434,346,860,135,50,688,726,204,6,316,808,367,880,253,463,16,355,830,837,531,15,668,287,369,248,804,924,80,76,414,948,276,454,910,777,554,3,912,929,287,294,998,917,724,850,234,695,988,256,568,17,909,875,447,168,753,950,553,480,253,901,193,986,148,369,111,697,463,570,658,865,502,686,233,859,348,459,642,748,716,173,47,987,631,519,173,50,363,334,2,544,775,990,40,842,445,399,738,98,568,245,809,825,781,603,791,505,959,427,779,836,113,382,614,771,994,447,568,838,61,2,21,678,409,821,102,711,339,105,478,626,809,618,475,966,6,240,467,192,30,528,4,783,941,288,747,194,933,788,827,465,451,485,920,82,288,209,929,278,940,85,152,833,766,36,990,459,372,996,547,213,648,165,787,426,525,975,67,23,275,871,889,410,324,545,900,235,64,75,353,798,898,955,412,974,735,192,960,692,596,486,739,60,102,435,557,922,821,711,123,831,956,919,307,588,378,634,51,885,715,656,46,19,639,338,967,532,979,190,722,292,21,699,592,212,716,388,385,66,644,951,777,916,284,398,350,421,366,50,57,363,497,75,782,161,771,604,23,766,682,400,193,235,276,417,230,364,366,523,164,276,676,812,784,55,480,484,320,92,602,629,739,135,311,600,227,181,248,388,269,578,981,443,96,113,11,419,865,944,76,434,989,880,680,514,949,24,984,409,12,444,707,550,809,869,700,965,267,705,66,80,473,630,991,279,88,534,958,807,376,773,618,254,386,642,441,382,511,910,228,908,972,702,60,281,694,566,899,614,713,520,653,638,453,370,663,16,310,382,762,693,337,381,491,547,333,33,976,648,518,486,763,493,494,343,495,535,326,742,569,256,846,821,920,724,675,392,370,926,934,911,93,331,81,886,564,614,291,440,136,346,787,676,678,709,15,167,653,963,19,176,82,675,178,768,518,431,501,723,672,841,229,110,832,218,928,848,87,506,361,98,657,551,354,723,844,584,424,535,855,64,622,589,519,48,182,938,137,856,806,443,777,336,538,339,692,357,107,369,843,241,543,283,92,789,153,550,346,513,839,355,146,418,40,413,672,765,690,391,916,536,813,731,233,864,124,238,560,806,535,710,516,953,879,436,36,29,822,945,113,896,253,301,913,903,257,691,768,834,455,926,84,435,807,182,864,482,547,314,271,877,943,27,817,398,798,444,684,788,123,654,565,719,958,232,948,918,587,739,159,88,618,622,38,46,214,382,869,943,48,2,881,389,583,512,571,224,229,356,941,287,962,182,389,544,514,285,977,472,899,330,734,743,473,294,527,27,746,405,108,130,785,838,533,639,299,183,965,685,717,40,404,723,141,768,588,641,619,303,353,10,133,778,841,539,221,664,91,865,94,451,237,390,555,171,718,635,576,602,35,7,870,547,54,757,840,803,617,335,244,517,941,291,958,358,837,960,379,615,220,229,327,580,323,313,609,173,960,932,72,494,866,729,805,280,514,770,237,536,771,501,343,78,326,515,391,463,312,766,440,512,731,739,540,674,26,438,416,859,882,833,217,820,662,924,879,62,999,424,590,105,358,644,115,749,262,263,555,689,194,453,302,505,727,698,862,224,780,313,485,595,973,634,544,875,876,400,62,504,738,640,2,157,688,375,881,427,334,697,882,812,190,537,39,843,505,425,998,406,768,144,551,554,369,534,192,489,550,571,984,945,306,737,630,494,883,81,266,771,34,664,479,875,659,704,127,870,193,793,437,377,750,183,658,322,813,118,432,729,146,674,384,995,821,402,69,170,284,35,203,695,552,460,795,270,61,742,695,276,325,820,193,271,86,863,701,871,199,406,910,782,799,678,648,733,518,652,413,833,646,754,300,980,604,756,874,201,696,288,225,575,929,188,932,539,379,342,999,411,812,575,736,921,353,831,864,856,74,55,364,542,403,459,69,82,650,196,168,107,3,804,547,550,401,680,48,963,399,924,811,769,133,256,809,8,476,12,453,245,978,538,562,479,245,911,39,96,589,975,194,894,990,107,952,999,816,55,477,788,327,776,613,640,271,373,359,467,860,598,636,716,226,797,110,900,371,639,517,154,750,27,345,258,873,524,396,84,411,623,246,434,861,274,30,563,117,490,54,151,223,450,590,400,142,137,192,539,418,948,236,132,210,823,605,280,19,359,526,744,611,208,789,717,732,232,446,970,813,220,204,481,792,554,624,672,106,178,970,318,111,637,622,914,270,810,546,496,405,69,967,471,992,934,691,511,840,856,65,642,295,480,898,607,516,798,314,983,887,970,499,184,502,579,780,368,949,843,778,482,185,607,849,64,571,647,214,798,385,227,243,123,431,118,972,861,512,940,622,71,985,976,392,231,587,936,441,241,667,26,283,615,655,15,636,535,283,646,196,128,611,914,743,222,575,382,19,350,844,953,396,313,679,20,127,30,468,315,577,902,334,23,954,346,107,753,610,408,103,406,526,34,839,580,35,381,330,962,444,564,730,484,125,64,416,440,808,493,666,109,740,261,87,296,205,839,379,134,195,364,400,459,9,403,260,6,89,415,128,517,691,402,800,107,502,15,708,253,571,927,62,891,814,980,864,161,697,5,72,234,643,585,936,983,789,482,402,928,657,257,251,146,473,750,961,201,677,714,454,873,68,88,446,813,78,635,549,288,658,320,96,721,7,442,994,733,634,733,115,227,453,741,302,498,858,270,154,369,519,392,996,379,678,987,216,937,243,169,604,935,737,866,626,240,506,187,292,820,15,631,1,77,555,4,52,556,418,921,380,201,93,455,863,425,741,438,262,874,838,420,236,123,7,204,911,93,566,941,205,704,899,321,744,182,901,785,214,333,645,906,678,662,867,284,626,53,967,164,371,997,931,621,250,541,853,701,196,672,100,203,993,53,3,491,893,650,16,191,930,828,517,85,448,84,763,119,746,537,607,976,913,925,970,586,193,996,574,57,90,259,877,686,643,973,100,426,643,430,998,350,366,889,445,210,880,649,343,495,579,835,916,608,826,598,571,98,13,525,450,288,324,853,593,959,128,170,952,357,53,246,866,986,783,855,413,887,718,66,745,37,34,73,247,287,808,746,228,286,132,703,656,414,372,196,187,313,6,790,708,120,959,260,428,854,452,382,214,797,68,394,408,2,233,396,931,183,320,529,695,788,423,964,65,608,319,354,697,965,900,465,472,722,668,724,271,742,763,889,207,967,300,580,767,832,407,690,552,72,318,478,616,121,720,967,433,289,919,291,983,225,562,644,129,896,446,153,840,233,100,64,256,235,956,222,202,66,458,404,129,2,882,736,928,484,717,971,726,856,420,150,573,585,417,877,537,882,713,198,903,451,395,556,372,786,366,412,931,988,64,279,899,498,782,660,391,226,122,114,610,946,412,262,573,659,412,814,328,680,799,57,71,344,595,344,275,733,112,339,351,993,199,368,995,797,998,231,658,621,559,18,861,502,762,448,585,858,113,62,418,393,330,689,992,518,143,612,430,604,312,117,877,649,383,972,926,935,869,453,881,225,409,882,903,398,296,922,796,974,125,264,914,803,231,923,884,426,757,512,635,869,242,954,578,58,97,155,15,340,830,345,330,796,284,193,141,333,226,543,882,428,518,478,501,638,551,840,313,869,858,939,904,974,966,357,235,799,653,940,695,76,992,677,516,673,13,788,728,755,847,256,788,881,106,60,829,43,525,761,571,343,318,165,837,906,277,367,330,528,413,707,605,260,479,681,382,454,193,416,800,338,87,620,197,290,213,795,403,980,426,82,4,189,124,198,366,898,540,616,80,629,657,569,176,927,168,620,547,82,136,225,226,561,109,498,401,805,903,74,840,490,924,240,679,852,152,30,209,227,288,96,46,332,846,593,682,415,887,200,695,140,531,246,735,280,404,630,411,247,529,575,576,278,661,771,33,381,117,798,697,812,66,569,455,662,601,110,338,899,907,454,997,558,115,240,584,551,496,633,988,193,230,59,971,902,126,505,999,137,906,862,896,150,123,733,98,206,173,297,679,498,361,50,660,812,450,325,143,149,782,342,86,801,100,96,670,85,166,271,291,560,779,69,192,227,871,580,248,64,416,820,192,728,108,46,917,196,13,677,572,935,916,394,899,19,993,918,125,455,712,679,738,943,264,890,752,643,767,267,226,379,429,459,722,751,647,49,297,745,89,167,322,560,250,887,30,187,206,997,292,383,950,291,400,462,693,113,83,284,571,870,164,319,222,263,334,731,136,185,152,223,335,896,170,288,420,995,306,174,296,451,625,444,149,288,600,694,664,733,944,851,141,732,649,574,592,222,601,196,377,158,320,521,667,654,330,166,879,666,637,287,999,459,392,535,301,571,671,160,30,587,405,741,295,321,141,431,292,170,320,91,218,687,770,71,358,330,622,430,758,693,503,232,539,313,568,415,375,465,745,497,761,837,464,948,715,609,549,264,28,774,338,248,58,147,280,947,94,967,602,215,811,315,405,126,206,862,233,580,288,864,657,328,261,215,917,828,270,36,366,91,388,622,848,744,201,864,331,422,735,962,856,411,131,778,486,658,974,702,507,792,411,265,824,454,137,128,177,419,31,57,369,432,451,173,81,806,372,990,160,508,13,525,690,888,337,454,994,80,260,833,684,98,659,516,116,697,111,626,807,975,691,520,624,723,849,665,837,13,261,249,613,8,319,895,298,182,75,788,443,58,613,599,134,602,877,31,14,558,169,15,648,831,741,424,626,626,288,133,921,694,70,331,525,862,708,100,934,302,392,715,666,159,435,846,777,384,228,758,10,920,9,632,723,249,164,315,871,31,539,624,350,60,907,190,48,460,1,932,939,344,346,41,236,529,477,711,336,50,274,566,708,57,913,852,778,718,219,717,768,811,827,498,825,185,346,103,624,51,360,855,791,330,112,497,223,443,127,768,486,795,919,311,725,202,29,57,852,259,968,57,899,33,64,62,609,414,501,22,165,202,777,760,789,539,996,149,102,442,837,838,157,971,451,283,360,149,115,83,532,16,368,263,894,68,809,777,218,86,984,709,241,781,894,114,396,530,753,505,897,162,985,538,746,862,385,754,585,891,350,759,884,670,201,166,977,861,523,470,846,878,292,179,895,914,128,352,363,29,147,378,516,733,654,854,527,361,461,648,901,534,997,977,106,815,783,886,909,877,969,688,195,211,20,442,761,149,550,538,662,221,494,156,462,340,844,391,889,966,566,223,802,189,252,690,346,406,676,394,63,929,901,894,84,352,554,757,192,660,796,55,54,321,501,573,704,508,384,631,39,104,711,901,59,384,169,975,515,401,94,360,130,494,35,410,892,310,165,384,356,139,95,189,192,602,319,398,403,214,123,466,213,96,703,351,836,2,164,935,330,423,763,539,402,122,474,639,277,513,467,698,267,29,829,22,824,640,403,563,50,669,839,964,278,447,143,61,818,941,516,998,740,68,603,874,530,835,158,981,15,422,799,677,35,989,454,996,582,877,955,280,203,119,425,851,839,535,991,482,644,159,519,731,880,360,731,132,956,385,374,640,443,995,208,513,745,515,51,127,721,692,724,651,560,310,214,543,5,414,746,114,72,571,57,856,396,492,901,480,884,624,274,871,862,977,225,74,678,897,236,321,340,545,113,333,593,762,545,277,923,84,718,384,519,906,893,195,283,518,150,973,708,162,572,876,567,862,924,818,568,464,496,973,696,601,241,195,57,350,766,697,802,647,740,380,691,485,876,735,194,962,943,695,6,602,350,894,84,635,313,94,825,14,854,994,999,760,870,48,80,664,718,375,848,469,402,172,841,395,698,589,878,123,989,301,230,562,916,543,192,781,826,828,356,673,656,827,521,53,979,471,841,474,811,119,199,695,569,528,925,580,593,821,318,211,889,957,966,833,49,677,683,946,49,993,183,150,443,194,26,898,223,59,860,675,531,426,23,832,684,666,6,377,330,239,610,289,186,999,546,710,3,961,666,614,918,809,444,420,114,534,296,573,15,140,109,639,989,415,554,84,201,917,717,821,563,197,524,843,462,819,898,737,482,550,510,964,552,197,386,989,611,135,770,714,111,800,480,705,346,186,668,635,166,108,250,961,209,285,121,671,309,636,801,971,198,741,268,581,174,159,809,832,798,734,493,649,23,654,832,282,436,465,89,339,332,613,196,641,985,913,672,855,224,895,226,819,983,479,373,700,759,692,922,894,976,17,535,685,874,698,694,704,849,233,393,863,587,822,680,727,345,2,346,780,94,248,700,621,891,60,448,908,472,499,749,777,362,74,170,821,205,9,208,431,251,556,623,803,626,455,670,657,285,394,321,856,717,349,17,385,1,546,602,308,76,550,793,602,148,56,129,216,496,414,496,696,153,903,341,166,764,663,567,825,937,212,908,203,799,274,69,846,872,170,458,286,624,939,690,25,297,323,438,406,616,274,680,6,279,769,6,373,191,236,149,754,896,470,291,563,26,668,714,576,393,200,321,588,119,279,950,979,429,471,25,720,798,446,531,822,331,609,10,941,189,822,173,656,830,370,986,910,363,697,138,267,403,907,241,496,586,548,765,860,418,172,843,230,782,245,646,946,995,868,749,396,941,562,33,849,508,683,765,922,332,721,130,769,943,913,195,695,11,579,466,403,752,426,610,58,10,78,992,475,684,61,331,970,649,152,32,621,496,57,213,613,978,880,46,50,987,554,721,861,772,889,327,654,857,479,393,431,320,623,112,8,216,410,749,98,974,244,905,190,368,844,918,87,531,110,656,510,372,963,78,965,516,691,690,26,749,812,776,690,971,10,532,746,806,900,354,579,93,852,510,448,885,886,412,856,251,106,277,580,871,80,539,112,869,480,785,555,574,657,173,836,68,482,719,838,391,515,409,826,332,483,636,954,360,377,720,409,278,516,297,556,698,326,827,285,784,763,383,753,959,589,299,884,809,242,549,906,846,62,499,636,539,416,982,334,609,376,433,525,100,915,851,430,586,179,925,43,535,997,666,631,890,374,64,763,105,967,481,383,293,948,857,146,604,183,707,521,729,28,250,588,679,637,406,336,742,214,64,872,791,37,244,497,105,464,930,118,364,557,903,290,553,767,418,741,283,743,752,34,660,745,550,395,889,572,479,758,826,217,66,301,585,824,340,709,438,616,283,345,112,129,655,725,802,353,592,534,876,824,899,445,104,481,868,119,107,182,410,3,515,720,203,73,280,786,256,837,482,899,602,716,986,839,651,859,237,148,357,342,68,172,8,476,617,784,601,172,172,859,310,409,578,991,668,833,115,545,330,797,929,445,201,976,447,62,389,60,462,422,329,783,695,733,76,201,683,368,351,838,976,352,815,750,264,769,811,43,987,550,771,766,76,493,697,883,410,555,32,656,97,755,727,568,929,507,139,331,176,548,37,483,271,467,563,743,819,736,128,674,612,712,620,683,305,227,751,268,942,687,312,985,256,981,355,906,649,103,999,143,972,993,141,734,682,857,959,128,332,975,547,511,80,188,61,702,202,759,211,590,86,89,189,21,795,256,692,589,298,377,913,345,489,710,546,842,163,845,9,880,736,5,246,996,234,559,453,464,462,777,570,142,223,840,313,303,660,986,604,348,728,145,278,167,715,549,281,626,612,33,901,484,184,880,581,410,861,327,339,85,990,489,943,48,825,358,899,51,870,143,652,551,304,743,323,602,476,706,550,36,565,407,289,646,832,94,254,335,956,876,226,525,481,300,848,429,434,661,60,537,278,866,681,178,506,931,183,418,817,322,428,470,858,87,715,374,291,694,277,978,977,233,458,136,712,763,669,841,396,624,870,829,130,622,378,208,139,937,171,660,690,393,745,22,508,536,603,610,888,227,948,504,860,688,449,111,482,709,185,470,754,300,531,570,949,384,11,163,522,117,249,61,271,179,170,924,151,877,240,591,412,70,905,585,599,944,928,163,853,269,575,489,172,549,538,382,2,106,151,74,971,561,384,954,148,6,838,278,527,22,669,235,190,676,426,376,767,756,730,735,674,120,51,296,274,208,390,824,433,792,695,978,109,1000,618,59,776,203,650,486,600,303,798,856,199,788,913,594,462,181,746,904,821,150,307,24,513,337,725,853,192,409,770,613,945,219,231,488,303,574,60,786,431,443,89,276,625,935,520,840,710,853,998,77,433,717,813,769,472,973,799,301,836,475,999,597,202,306,569,474,560,880,749,46,534,16,572,390,723,359,582,425,854,52,968,237,630,874,760,870,416,997,308,635,531,861,223,605,508,523,251,716,562,735,53,715,826,588,368,702,489,668,349,941,443,960,657,444,685,776,278,189,894,446,249,189,305,673,140,912,755,261,69,908,560,224,535,318,432,735,714,369,815,342,891,979,553,268,113,94,935,186,269,243,981,245,194,202,937,322,192,954,744,389,87,415,991,276,229,825,523,387,28,534,520,594,61,516,634,743,590,933,9,55,466,722,665,484,471,659,329,587,347,752,608,361,915,292,787,427,111,504,705,677,838,762,651,458,802,832,531,142,678,590,72,83,762,95,791,680,116,278,291,962,513,221,826,952,417,731,157,566,135,688,303,240,707,646,669,989,46,853,110,983,335,783,979,47,320,361,313,299,711,36,736,469,728,979,359,471,741,722,605,993,991,609,74,313,961,165,458,230,869,899,462,468,563,92,415,856,856,920,436,958,503,540,907,275,768,475,358,549,808,368,27,542,343,938,437,55,976,324,821,66,499,231,797,173,655,242,261,615,531,887,575,870,503,453,90,879,577,238,434,963,566,376,164,916,650,890,391,408,474,313,379,340,665,797,391,770,129,693,848,816,283,206,806,388,809,270,957,967,455,962,972,476,395,542,258,217,932,890,562,413,67,446,418,265,725,241,737,717,65,944,722,204,968,25,577,649,372,492,108,836,208,555,899,509,660,311,658,680,715,796,735,777,534,326,260,222,247,264,987,740,965,205,360,654,758,563,478,387,874,654,974,423,838,405,993,922,989,790,965,76,283,148,629,194,709,542,717,126,641,207,295,109,244,325,800,24,324,602,536,453,732,899,166,564,681,299,804,384,240,958,788,927,785,971,751,942,25,449,879,814,962,740,640,235,212,37,802,714,949,354,79,142,667,679,697,656,657,256,972,43,579,328,330,203,295,646,410,261,890,641,776,515,862,823,560,939,479,647,701,15,841,124,189,574,963,661,918,324,812,336,13,160,390,551,389,552,79,613,302,315,461,901,785,220,480,814,447,263,457,393,636,354,780,922,578,367,428,859,908,852,995,847,518,162,505,166,681,971,105,619,786,930,48,274,528,408,953,358,779,260,926,898,777,27,110,142,453,936,646,590,837,569,432,773,892,737,74,831,785,510,553,251,282,889,604,769,770,942,871,937,284,248,48,515,596,283,270,195,83,379,321,435,930,110,720,148,570,366,138,913,924,588,558,595,945,569,23,862,383,510,883,348,876,647,904,927,683,487,866,341,228,784,767,95,486,631,997,935,8,320,898,796,960,987,909,849,933,339,379,747,424,45,740,293,16,336,951,372,524,861,126,479,215,534,334,120,487,518,377,840,82,942,74,770,894,703,199,355,720,614,672,396,261,502,35,132,572,976,469,340,695,976,727,840,501,23,258,710,749,969,606,174,166,705,455,483,413,213,93,100,761,901,921,17,859,353,255,620,164,514,346,876,424,928,173,242,233,995,397,657,846,984,250,549,125,670,402,988,645,159,662,750,754,169,750,871,569,196,396,313,55,768,507,848,199,707,16,92,945,762,624,382,247,635,324,250,623,545,457,930,723,386,360,817,820,573,898,592,691,54,943,26,840,125,154,115,702,435,630,210,903,167,583,440,367,652,342,347,560,586,728,383,193,386,730,480,51,142,352,715,309,311,640,806,365,447,399,132,679,92,948,579,468,558,444,669,819,196,88,404,612,787,863,463,180,447,550,753,250,867,395,72,231,697,521,699,87,760,7,913,240,573,430,498,784,880,487,292,831,400,831,642,459,904,149,159,132,995,312,555,492,785,541,75,87,785,609,426,231,807,950,784,610,401,522,793,492,689,242,807,168,51,672,388,39,14,354,613,387,194,525,738,151,648,348,26,704,122,473,415,850,94,865,21,961,39,870,693,586,874,549,215,959,444,77,63,347,305,373,869,967,16,346,178,911,309,330,360,32,877,868,902,919,416,818,798,488,588,941,656,87,711,143,308,969,66,425,877,3,969,567,563,872,227,969,329,217,465,304,469,102,468,987,304,561,149,173,428,394,236,348,149,849,354,661,420,966,605,870,537,563,745,459,105,325,261,579,7,740,43,653,715,375,514,400,587,623,44,628,332,874,639,309,834,903,845,189,140,882,714,29,865,701,304,475,784,1000,949,751,387,378,646,623,719,721,607,778,820,420,192,210,281,61,800,120,22,578,35,479,575,753,636,355,261,490,844,666,324,11,331,948,755,210,953,482,890,617,805,278,719,961,57,964,776,820,476,689,567,272,55,614,531,115,765,960,573,998,389,530,140,53,259,191,196,417,912,495,39,346,584,806,512,540,738,375,297,767,96,104,783,860,641,747,806,456,318,219,499,920,143,682,63,716,698,868,894,934,616,372,955,326,671,862,115,708,563,391,977,449,221,725,260,220,344,254,424,4,152,693,159,86,646,365,904,325,263,700,360,564,914,662,926,328,527,180,40,242,792,18,393,703,591,924,429,316,34,247,164,296,232,59,36,439,688,616,454,692,681,967,35,495,80,149,251,214,625,257,892,388,838,716,553,252,827,99,489,74,596,101,709,611,273,116,37,335,463,887,863,132,657,835,143,829,830,806,674,454,432,443,544,380,640,411,213,60,703,771,985,813,576,808,329,404,627,27,155,59,294,75,197,793,685,444,853,61,190,978,102,150,771,815,521,534,57,607,963,563,973,515,994,569,953,986,881,384,155,874,352,33,950,609,147,613,847,569,952,979,354,469,583,797,932,298,548,37,427,400,145,375,409,522,230,613,611,797,34,485,540,265,810,947,26,423,53,321,821,50,997,648,900,332,825,32,773,266,953,604,528,134,749,504,507,261,644,745,289,476,110,549,473,459,678,364,224,470,117,342,777,729,151,850,875,190,952,454,678,410,452,232,687,579,429,254,278,706,657,876,733,358,58,913,830,783,89,403,802,957,496,186,340,810,43,120,903,177,64,589,512,552,305,619,657,490,839,524,640,486,469,593,251,208,318,946,559,527,154,331,337,135,374,431,92,637,871,823,995,702,950,796,678,71,624,500,37,353,191,837,354,644,11,891,79,729,440,728,802,582,817,219,969,875,370,790,173,108,957,505,982,98,73,610,412,596,301,641,576,956,35,948,852,845,597,473,174,943,631,978,45,410,588,109,248,871,788,453,385,418,21,26,130,464,461,60,131,708,285,656,327,560,696,431,886,221,100,601,837,40,493,135,671,593,248,265,757,366,96,153,903,441,220,469,770,903,492,696,967,710,676,968,185,982,260,410,448,354,644,1000,585,500,866,309,541,616,275,472,587,166,822,163,136,330,407,846,321,881,969,206,2,755,77,878,20,734,857,185,781,138,829,340,117,234,629,301,340,232,905,417,313,14,504,191,517,342,940,513,698,362,707,469,775,269,650,59,838,944,351,899,1000,492,967,298,684,111,364,711,480,111,871,557,603,142,333,405,778,948,758,969,862,695,666,430,113,860,372,258,196,70,549,95,323,576,133,466,935,695,857,956,788,258,54,612,615,26,201,57,47,258,14,983,782,961,639,275,865,393,735,212,645,435,878,920,861,767,166,583,613,761,574,410,381,871,231,233,881,389,587,851,669,479,688,34,344,634,947,276,455,151,944,589,373,187,795,602,668,110,367,165,396,744,94,289,394,706,666,137,477,764,1,369,730,464,165,690,512,575,551,328,383,66,143,807,712,102,265,152,851,910,464,727,549,456,491,766,391,267,430,347,221,20,50,905,656,296,265,834,234,303,131,232,524,588,962,173,982,569,930,44,211,639,861,214,333,260,699,827,131,653,932,66,521,420,793,761,621,157,809,527,99,657,85,270,275,945,386,633,323,10,731,257,59,77,377,716,238,180,888,781,689,406,931,439,237,484,244,883,730,653,414,657,401,126,893,319,713,546,709,904,931,837,924,209,237,303,740,57,424,484,900,119,281,844,455,438,810,97,850,637,173,241,386,890,147,600,296,419,527,500,352,945,183,566,507,200,477,450,921,860,914,536,24,932,276,262,877,864,501,347,111,784,34,35,368,633,272,690,976,305,164,250,931,541,821,8,445,876,152,590,943,407,242,332,810,642,228,440,413,248,156,525,779,459,278,984,862,90,899,284,26,297,46,347,220,130,839,842,262,439,116,990,632,287,899,110,736,416,440,451,148,295,235,109,287,533,513,918,79,258,56,679,440,284,145,380,443,828,802,540,795,648,909,939,227,669,79,202,799,35,888,300,975,143,615,309,992,283,889,258,33,121,976,898,628,761,341,521,119,312,391,760,206,191,499,608,5,624,209,702,45,139,439,537,543,299,986,564,241,457,605,837,473,750,782,798,261,926,307,948,225,944,810,930,667,381,666,970,580,486,902,571,670,442,9,474,844,204,328,7,227,140,125,285,172,217,127,778,872,397,751,153,514,767,267,650,447,971,541,739,348,929,390,217,277,496,762,656,860,404,401,131,124,476,997,394,693,212,910,409,176,913,773,722,836,672,176,39,846,557,990,239,476,478,590,515,914,386,326,328,82,801,392,939,247,988,233,805,7,862,596,492,583,59,472,59,413,839,704,833,576,548,886,481,471,621,585,195,254,787,706,811,450,62,941,97,587,185,914,541,629,740,497,271,566,743,880,457,362,176,27,432,613,83,765,1000,910,110,827,85,783,535,702,404,601,509,195,541,588,914,38,14,702,193,842,537,269,647,891,9,58,853,585,513,808,290,582,463,741,104,67,594,813,489,844,83,910,991,335,482,966,912,808,269,639,288,618,339,770,783,909,631,206,222,627,715,381,387,549,704,492,38,333,787,329,451,102,876,510,404,334,649,423,391,738,509,568,953,280,897,487,659,337,671,236,694,694,462,418,424,578,738,351,686,505,572,222,456,587,328,77,618,320,863,672,985,734,358,454,159,491,990,195,568,650,91,293,274,898,511,323,616,575,479,28,218,873,358,195,159,379,118,341,391,555,703,412,855,357,711]$/;"	v
bb	math/高精度计算C++.cpp	/^BigInt ba, bb;$/;"	v
bool8	math/sieve-method/era-with-numpy.py	/^from numpy import array, int64, bool8, append$/;"	i
breadth_travel	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^void BinarySearchTree::breadth_travel() {$/;"	f	class:BinarySearchTree
breadth_travel	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::breadth_travel() {$/;"	f	class:BinaryTree
breadth_travel	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^void RedBlackTree::breadth_travel() {$/;"	f	class:RedBlackTree
breadth_travel	py/data_structure/AVL_tree.py	/^    def breadth_travel(self):$/;"	m	class:BinarySearchTree
breadth_travel	py/data_structure/Red-Black-tree.py	/^    def breadth_travel(self):$/;"	m	class:RBT
breadth_travel	py/data_structure/binary-search-tree.py	/^    def breadth_travel(self):$/;"	m	class:BinarySearchTree
breadth_travel	py/data_structure/binary_Tree.py	/^    def breadth_travel(self):$/;"	m	class:BinaryTree
breadth_travel1	py/data_structure/AVL_tree.py	/^    def breadth_travel1(self):$/;"	m	class:BinarySearchTree
breadth_travel1	py/data_structure/Red-Black-tree.py	/^    def breadth_travel1(self):$/;"	m	class:RBT
breadth_travel1	py/data_structure/binary-search-tree.py	/^    def breadth_travel1(self):$/;"	m	class:BinarySearchTree
breadth_travel1	py/data_structure/binary_Tree.py	/^    def breadth_travel1(self):$/;"	m	class:BinaryTree
breadth_travel2	py/data_structure/AVL_tree.py	/^    def breadth_travel2(self):$/;"	m	class:BinarySearchTree
breadth_travel2	py/data_structure/Red-Black-tree.py	/^    def breadth_travel2(self):$/;"	m	class:RBT
breadth_travel2	py/data_structure/binary-search-tree.py	/^    def breadth_travel2(self):$/;"	m	class:BinarySearchTree
breadth_travel2	py/data_structure/binary_Tree.py	/^    def breadth_travel2(self):$/;"	m	class:BinaryTree
bt	c_cpp/back-tracking/24-8-8-1000/24-pt.cpp	/^    bool bt(vector<double>& digits) {$/;"	f	class:Solution
bt	lc/back-tracking/39.py	/^        def bt(start):$/;"	f	function:Solution.combinationSum
bt	lc/back-tracking/40.py	/^        def bt(start):$/;"	f	function:Solution.combinationSum2
bt	lc/back-tracking/46.py	/^        def bt():$/;"	f	function:Solution.permute
bt	lc/back-tracking/46.py	/^        def bt():$/;"	f	function:Solution.permute1
bt	lc/back-tracking/51-nqueens.cpp	/^    void bt(int n, int row, vector<string> board) {$/;"	f	class:Solution	file:
bt	lc/back-tracking/lc-17-phone-number.py	/^        def bt(d):$/;"	f	function:Solution.letterCombinations
bt	py/back-tracking/24.py	/^        def bt(tmp):$/;"	f	function:Solution.judgePoint24
buf	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^char buf[10];$/;"	v
build_from_array	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^void BinarySearchTree::build_from_array(vector<int> &items) {$/;"	f	class:BinarySearchTree
cache	c_cpp/Linked_List/lru.cpp	/^    unordered_map<int, Node *> cache; \/\/ 缓存位置$/;"	m	class:LRUCache	file:
cal	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^    string cal; \/\/ 数字对应的字符形式$/;"	m	struct:item	file:
cal	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^    string cal;$/;"	m	struct:item	file:
calc	c_cpp/back-tracking/24-8-8-1000/24-pt.cpp	/^    double calc(int op, double a, double b) {$/;"	f	class:Solution
calc	lc/back-tracking/24-point.cpp	/^    double calc(int op, double lhs, double rhs) {$/;"	f	class:Solution
calc	py/back-tracking/24.py	/^        def calc(i, lhs, rhs):$/;"	f	function:Solution.judgePoint24
calcbit1_v1	py/bit_ops/calc_bit_1.py	/^def calcbit1_v1(n):$/;"	f
calcbit1_v2	py/bit_ops/calc_bit_1.py	/^def calcbit1_v2(n):$/;"	f
calcbit1_v3	py/bit_ops/calc_bit_1.py	/^def calcbit1_v3(n):$/;"	f
calcbit1_v4	py/bit_ops/calc_bit_1.py	/^def calcbit1_v4(n):$/;"	f
canJump	lc/lc-55.py	/^    def canJump(self, nums: List[int]) -> bool:$/;"	m	class:Solution
capacity	c_cpp/Linked_List/lru.cpp	/^    int capacity, size;$/;"	m	class:LRUCache	file:
capacity	c_cpp/Linked_List/lru.cpp	/^    int capacity, size;$/;"	m	class:LRUCache1	file:
change	math/高精度计算C++.cpp	/^void change(Complex y[], int len) {$/;"	f
check	lc/back-tracking/eight_queens.cpp	/^bool check(int row, int col) {$/;"	f
check1	lc/back-tracking/eight_queens_rest_method2.cpp	/^bool check1(int xx, int yy) {$/;"	f
check2	lc/back-tracking/eight_queens_rest_method2.cpp	/^bool check2(int xx, int yy) {$/;"	f
chessboard	lc/back-tracking/eight_queens.cpp	/^int chessboard[N][N] = {};$/;"	v
climbStairs	lc/dp_/climb_stairs.cpp	/^int climbStairs(int n) {$/;"	f
color	c_cpp/Binary_Tree/rbt.h	/^    bool color; \/\/ true:black, false:red$/;"	m	struct:RBTreeNode
colors	py/1.py	/^colors = {}$/;"	v
comb	lc/lc-233.py	/^from math import comb$/;"	i
comb	lc/lc-6142.py	/^from math import comb$/;"	i
comb	lc/utils1.py	/^from math import comb, perm$/;"	i
comb	py/combinatorial_number.py	/^from math import comb$/;"	i
combinationSum	lc/back-tracking/39.py	/^    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:$/;"	m	class:Solution
combinationSum2	lc/back-tracking/40.py	/^    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:$/;"	m	class:Solution
combinationSum3	lc/back-tracking/216.py	/^    def combinationSum3(self, k: int, n: int) -> List[List[int]]:$/;"	m	class:Solution
combinationSum4	lc/back-tracking/377-combination4.cpp	/^    int combinationSum4(vector<int>& nums, int target) {$/;"	f	class:Solution
combine	lc/back-tracking/lc-77-comb.py	/^    def combine(self, n: int, k: int) -> List[List[int]]:$/;"	m	class:Solution
conflict	py/eight_queen.py	/^    def conflict(self, state, nextX):$/;"	m	class:Solution
const	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
construct2DArray	lc/test-lc-11.py	/^def construct2DArray(original, m: int, n: int):$/;"	f
constructMaximumBinaryTree	lc/tree-/654-max-bitree.py	/^    def constructMaximumBinaryTree(self, nums: List[int]) -> Optional[TreeNode]:$/;"	m	class:Solution
convert	lc/lc-6.py	/^    def convert(self, s: str, numRows: int) -> str:$/;"	m	class:Solution
convertToTitle	lc/Excel表列名称.py	/^def convertToTitle(n: int) -> str:$/;"	f
convert_v1	lc/lc-6.py	/^    def convert_v1(self, s: str, numRows: int) -> str:$/;"	m	class:Solution
count1	lc/lc-233.py	/^        def count1(A, B):$/;"	f	function:Solution.countDigitOne
countBadPairs	lc/lc-6142.py	/^    def countBadPairs(self, nums: List[int]) -> int:$/;"	m	class:Solution
countDigitOne	lc/lc-233.py	/^    def countDigitOne(self, n: int) -> int:$/;"	m	class:Solution
cutSquares	lc/lc-2669.py	/^            -> List[float]:$/;"	m	class:Solution
dec2bin	c_cpp/bit-ops/dec2bin.cpp	/^string dec2bin(int x) {$/;"	f
dec2hex	c_cpp/bit-ops/dec2bin.cpp	/^string dec2hex(int x) {$/;"	f
dec2hex	lc/math/405-dec2hex.cpp	/^string dec2hex(int x) {$/;"	f
dec2hex1	lc/math/405-dec2hex.cpp	/^string dec2hex1(long x) {$/;"	f
dec2x	c_cpp/bit-ops/system_convert.cpp	/^string dec2x(int x, int k) {$/;"	f
dec2x	py/bit_ops/system_convert.py	/^def dec2x(x: int, k: int) -> str:$/;"	f
defaultdict	lc/back-tracking/332.py	/^from collections import defaultdict$/;"	i
defaultdict	lc/lc-1224.py	/^from collections import Counter, defaultdict$/;"	i
defaultdict	lc/utils1.py	/^from collections import deque, defaultdict, Counter$/;"	i
delNode	c_cpp/Linked_List/lru.cpp	/^    void delNode(Node *node) {$/;"	f	class:LRUCache
delTail	c_cpp/Linked_List/lru.cpp	/^    Node *delTail() { \/\/ 删除尾结点$/;"	f	class:LRUCache
delete_fixup	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^void RedBlackTree::delete_fixup(RBTreeNode *x) {$/;"	f	class:RedBlackTree
deque	lc/dfs_bfs/1162.py	/^from collections import deque$/;"	i
deque	lc/dfs_bfs/542-0-1-mat.py	/^from collections import deque$/;"	i
deque	lc/utils1.py	/^from collections import deque, defaultdict, Counter$/;"	i
deque	py/data_structure/AVL_tree.py	/^from collections import deque$/;"	i
deque	py/data_structure/Red-Black-tree.py	/^from collections import deque$/;"	i
deque	py/data_structure/binary-search-tree.py	/^from collections import deque$/;"	i
deque	py/data_structure/binary_Tree.py	/^from collections import deque$/;"	i
dequeue	py/data_structure/Queue.py	/^    def dequeue(self):$/;"	m	class:Queue
dequeue	py/data_structure/Queue_by_2_stack.py	/^    def dequeue(self):$/;"	m	class:Queue2stack
dfs	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000-1.cpp	/^bool dfs(int n) {$/;"	f
dfs	java/88-1000.java	/^public static boolean dfs(int n) {$/;"	m	class:Main
dfs	lc/back-tracking/24-point.cpp	/^    bool dfs(vector<double>& nums) {$/;"	f	class:Solution
digit	lc/lc-233.py	/^        def digit(n):$/;"	f	function:Solution.countDigitOne
digits	lc/utils1.py	/^from string import ascii_lowercase, digits$/;"	i
dis	c_cpp/Linked_List/Skip_List.cpp	/^    uniform_real_distribution<double> dis; \/\/ 随机数分布$/;"	m	class:Skiplist	file:
dist	lc/lc-593.py	/^        def dist(pa, pb):$/;"	f	function:Solution.validSquare
divide	math/division.cpp	/^int divide(int dividend, int divisor) {$/;"	f
division	math/division/division-simulate.cpp	/^int division(int dividend, int divisor) {$/;"	f
dll	py/data_structure/double_link_list.py	/^    dll = DoubleLinkList()$/;"	v	class:DoubleLinkList
e	math/sieve-method/Eratosthenes-v1.py	/^e = time()$/;"	v
e	math/sieve-method/Eratosthenes-v2.py	/^e = time()$/;"	v
e	math/sieve-method/Euler.py	/^e = time()$/;"	v
e	math/sieve-method/era-with-numpy.py	/^e = time()$/;"	v
eight_queen	lc/back-tracking/eight_queens_rest_method1.cpp	/^void eight_queen(int line) {$/;"	f
ellx	lc/lc-2669.py	/^        def ellx(y):$/;"	f	function:Solution.cutSquares
elly	lc/lc-2669.py	/^        def elly(x):$/;"	f	function:Solution.cutSquares
enqueue	py/data_structure/Queue.py	/^    def enqueue(self, item):$/;"	m	class:Queue
enqueue	py/data_structure/Queue_by_2_stack.py	/^    def enqueue(self, item):$/;"	m	class:Queue2stack
equalFrequency	lc/simulation/lc-2423.py	/^    def equalFrequency(self, word: str) -> bool:$/;"	m	class:Solution
era	math/sieve-method/sieve-method.cc	/^void era() {$/;"	f
erase	c_cpp/Linked_List/Skip_List.cpp	/^    bool erase(int num) {$/;"	f	class:Skiplist
euler	math/sieve-method/Euler.py	/^def euler():$/;"	f
euler	math/sieve-method/sieve-method.cc	/^void euler() {$/;"	f
f1	c_cpp/dp/fibonacci.cpp	/^int f1(int n) {$/;"	f
f2	c_cpp/dp/fibonacci.cpp	/^int f2(int n) {$/;"	f
f3	c_cpp/dp/fibonacci.cpp	/^int f3(int n) {$/;"	f
f4	c_cpp/dp/fibonacci.cpp	/^int f4(int n) {$/;"	f
fa	c_cpp/union-find-set.cpp	/^int fa[MAXN];$/;"	v
fa	py/find-and-union-set/find-union-set.py	/^fa = [0] * MAXN  # 记录某个人的爸爸是谁，特别规定，祖先的爸爸是他自己$/;"	v
factorial	py/combinatorial_number.py	/^def factorial(n):$/;"	f
factorial	py/factorial_loop.py	/^from math import factorial$/;"	i
factorial	py/recursion/factorial_recur.py	/^def factorial(n):$/;"	f
factorial_v1	py/factorial_loop.py	/^def factorial_v1(n):$/;"	f
factorial_v2	py/factorial_loop.py	/^def factorial_v2(n):$/;"	f
fft	math/高精度计算C++.cpp	/^void fft(Complex y[], int len, int on) {$/;"	f
fib_recursion	py/recursion/fibonacci.py	/^def fib_recursion(n):$/;"	f
fillCups	lc/lc-300.py	/^    def fillCups(self, amount: List[int]) -> int:$/;"	m	class:Solution
find	c_cpp/Linked_List/Double_Linked_List.hpp	/^int DoubleLinkedList::find(int node) {$/;"	f	class:DoubleLinkedList
find	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^int RingDoubleLinkedList::find(int node) {$/;"	f	class:RingDoubleLinkedList
find	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^int RingSingleLinkedList::find(int node) {$/;"	f	class:RingSingleLinkedList
find	c_cpp/Linked_List/Single_Linked_List.hpp	/^int SingleLinkedList::find(int node) {$/;"	f	class:SingleLinkedList
find	c_cpp/union-find-set.cpp	/^int find(int x) {$/;"	f
find	lc/hash-table/lc-128.py	/^        def find(i):$/;"	f	function:Solution.longestConsecutive
findItinerary	lc/back-tracking/332.py	/^    def findItinerary(self, tickets: List[List[str]]) -> List[str]:$/;"	m	class:Solution
findLongestSubarray	lc/hash-table/2936.cpp	/^    vector<string> findLongestSubarray(vector<string>& array) {$/;"	f	class:Solution
findMaxAverage	lc/findMaxAverage.py	/^def findMaxAverage(nums, k: int) -> float:$/;"	f
find_1	py/find-and-union-set/find-union-set.py	/^def find_1(i):$/;"	f
find_2max	c_cpp/find-max-2max.cpp	/^int find_2max(vector<int> &v) {$/;"	f
find_3max	c_cpp/find-max-2max.cpp	/^int find_3max(vector<int> &v) {$/;"	f
find_isqrt	math/long_division_find_the_nice_number.cpp	/^int find_isqrt(int x) {$/;"	f
find_iter	py/find-and-union-set/find-union-set.py	/^def find_iter(x):$/;"	f
find_max	c_cpp/find-max-2max.cpp	/^int find_max(vector<int> &v) {$/;"	f
find_nice	math/calc_sqrt_by_div.cpp	/^int find_nice(long long R, long long b = 0) {$/;"	f
find_nice	math/division.cpp	/^int find_nice(int reminder, int divisor) {$/;"	f
find_nice	math/division/division-simulate.cpp	/^int find_nice(int R, int b) {$/;"	f
find_nice	math/long_division_find_the_nice_number.cpp	/^int find_nice(int R, int b = 0) {$/;"	f
find_nice	math/long_division_sqrt.py	/^def find_nice(R, b=0):$/;"	f
find_nice	math/long_division_with_gmp.c	/^int find_nice(mpz_t R, mpz_t b) {$/;"	f
find_nice	math/long_division_with_gmp.cpp	/^int find_nice(mpz_class R, mpz_class b) {$/;"	f
find_recur	py/find-and-union-set/find-union-set.py	/^def find_recur(x):$/;"	f
findstr	lc/str_/KMP.cpp	/^int findstr(const string & s1,$/;"	f
first	c_cpp/Linked_List/Double_Linked_List.hpp	/^ListNode* DoubleLinkedList::first() { return head; }$/;"	f	class:DoubleLinkedList
first	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^ListNode* RingDoubleLinkedList::first() { return head; }$/;"	f	class:RingDoubleLinkedList
first	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^ListNode* RingSingleLinkedList::first() { return head; }$/;"	f	class:RingSingleLinkedList
first	c_cpp/Linked_List/Single_Linked_List.hpp	/^ListNode* SingleLinkedList::first() { return head; }$/;"	f	class:SingleLinkedList
flag	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^    bool flag;  \/\/ 表示是否用过该数字$/;"	m	struct:item	file:
flag	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^    bool flag;$/;"	m	struct:item	file:
forward	c_cpp/Linked_List/Skip_List.cpp	/^        vector<Node *> forward;$/;"	m	struct:Skiplist::Node	file:
fourSum	lc/2ptr-slide-window/lc-18-4sum.py	/^    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:$/;"	m	class:Solution
fractionAddition	lc/lc-592-frac-plus-minus.py	/^    def fractionAddition(self, expression: str) -> str:$/;"	m	class:Solution
g_numsolutions	lc/back-tracking/n-queens.c	/^SOLUTIONTYPE g_numsolutions = 0;$/;"	v
gcd	lc/lc-592-frac-plus-minus.py	/^    def gcd(self, a, b):$/;"	m	class:Solution
gcd_loop	py/gcd_loop.py	/^def gcd_loop(m, n):$/;"	f
gcd_recur_1	py/recursion/gcd_recur.py	/^def gcd_recur_1(a, b):$/;"	f
gcd_recur_2	py/recursion/gcd_recur.py	/^def gcd_recur_2(a, b):$/;"	f
gcd_recur_3	py/recursion/gcd_recur.py	/^def gcd_recur_3(a, b):$/;"	f
gen_data	c_cpp/Sort/Quick_Sort_CLRS.cpp	/^vector<int> gen_data(size_t N) {$/;"	f
generateParenthesis	lc/lc-22.py	/^    def generateParenthesis(self, n: int) -> List[str]:$/;"	m	class:Solution
get	c_cpp/Linked_List/lru.cpp	/^    int get(int key) {$/;"	f	class:LRUCache
get	c_cpp/Linked_List/lru.cpp	/^    int get(int key) {$/;"	f	class:LRUCache1
getBitCnt	py/sort_algorithm/Radix_Sort.py	/^def getBitCnt(num: int) -> int:$/;"	f
getCoeff	lc/lc-640-solve-equation.py	/^        def getCoeff(symb1, val1):$/;"	f	function:Solution.solveEquation
getNextArray	lc/str_/KMP.cpp	/^void getNextArray(vector<int> & next,$/;"	f
getNumberOfBacklogOrders	lc/1801-priority-queue-simulation-1.cpp	/^    int getNumberOfBacklogOrders(vector<vector<int>>& orders) {$/;"	f	class:Solution
groupby	lc/look-and-say.py	/^from itertools import groupby$/;"	i
head	c_cpp/Linked_List/Double_Linked_List.hpp	/^    ListNode* head;$/;"	m	class:DoubleLinkedList
head	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^    ListNode* head;$/;"	m	class:RingDoubleLinkedList
head	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^    ListNode* head;$/;"	m	class:RingSingleLinkedList
head	c_cpp/Linked_List/Single_Linked_List.hpp	/^    ListNode* head;$/;"	m	class:SingleLinkedList
head	c_cpp/Linked_List/Skip_List.cpp	/^    Node *head; \/\/ 头结点$/;"	m	class:Skiplist	file:
head	c_cpp/Linked_List/lru.cpp	/^    Node *head, *tail;                \/\/ 存头尾结点, 便于删除$/;"	m	class:LRUCache	file:
helper	c_cpp/Linked_List/Skip_List.cpp	/^    void helper(int target, vector<Node *> &pre) { \/\/ 辅助函数$/;"	f	class:Skiplist
idx	lc/str_/KMP.py	/^    idx = KMP(s1, s2)$/;"	v
img	py/1.py	/^img = Image.open('image.png')$/;"	v
in_order	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::in_order() {$/;"	f	class:BinaryTree
in_order	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^void RedBlackTree::in_order() {$/;"	f	class:RedBlackTree
in_order	py/data_structure/AVL_tree.py	/^    def in_order(self, node):$/;"	m	class:BinarySearchTree
in_order	py/data_structure/Red-Black-tree.py	/^    def in_order(self, node):$/;"	m	class:RBT
in_order	py/data_structure/binary-search-tree.py	/^    def in_order(self, node):$/;"	m	class:BinarySearchTree
in_order	py/data_structure/binary_Tree.py	/^    def in_order(self):$/;"	m	class:BinaryTree
in_order1	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::in_order1() {$/;"	f	class:BinaryTree
in_order2	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::in_order2() {$/;"	f	class:BinaryTree
in_order3	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::in_order3() {$/;"	f	class:BinaryTree
in_order_1	py/data_structure/AVL_tree.py	/^    def in_order_1(self, node):$/;"	m	class:BinarySearchTree
in_order_1	py/data_structure/Red-Black-tree.py	/^    def in_order_1(self, node):$/;"	m	class:RBT
in_order_1	py/data_structure/binary-search-tree.py	/^    def in_order_1(self, node):$/;"	m	class:BinarySearchTree
in_order_1	py/data_structure/binary_Tree.py	/^    def in_order_1(self):$/;"	m	class:BinaryTree
in_order_2	py/data_structure/AVL_tree.py	/^    def in_order_2(self, node):$/;"	m	class:BinarySearchTree
in_order_2	py/data_structure/Red-Black-tree.py	/^    def in_order_2(self, node):$/;"	m	class:RBT
in_order_2	py/data_structure/binary-search-tree.py	/^    def in_order_2(self, node):$/;"	m	class:BinarySearchTree
in_order_2	py/data_structure/binary_Tree.py	/^    def in_order_2(self):$/;"	m	class:BinaryTree
in_order_3	py/data_structure/binary_Tree.py	/^    def in_order_3(self):$/;"	m	class:BinaryTree
in_order_4	py/data_structure/binary_Tree.py	/^    def in_order_4(self):$/;"	m	class:BinaryTree
in_order_iter	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^void BinarySearchTree::in_order_iter() {$/;"	f	class:BinarySearchTree
in_order_recur	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^void BinarySearchTree::in_order_recur() {$/;"	f	class:BinarySearchTree
inf	lc/2ptr-slide-window/lc-16-3sum-closest.py	/^from math import inf$/;"	i
inf	lc/lc-45.py	/^        from math import inf$/;"	i
info_arch	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_extensions_default	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v
info_language_extensions_default	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v
info_language_standard_default	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_standard_default =$/;"	v
info_language_standard_default	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v
info_platform	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v
info_version	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v
info_version_internal	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";$/;"	v
info_version_internal	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
info_version_internal	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";$/;"	v
init	c_cpp/union-find-set.cpp	/^inline void init(int n) {$/;"	f
insert	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^void BinarySearchTree::insert(int item) {$/;"	f	class:BinarySearchTree
insert	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^void RedBlackTree::insert(int item) {$/;"	f	class:RedBlackTree
insert	c_cpp/Linked_List/Double_Linked_List.hpp	/^void DoubleLinkedList::insert(int pos, int val) {$/;"	f	class:DoubleLinkedList
insert	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^void RingDoubleLinkedList::insert(int pos, int val) {$/;"	f	class:RingDoubleLinkedList
insert	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^void RingSingleLinkedList::insert(int pos, int val) {$/;"	f	class:RingSingleLinkedList
insert	c_cpp/Linked_List/Single_Linked_List.hpp	/^void SingleLinkedList::insert(int pos, int val) {$/;"	f	class:SingleLinkedList
insert	py/data_structure/double_link_list.py	/^    def insert(self, pos, item):$/;"	m	class:DoubleLinkList
insert	py/data_structure/single_cycle_link_list.py	/^    def insert(self, pos, item):$/;"	m	class:SingleCycleLinkList
insert	py/data_structure/single_link_list.py	/^    def insert(self, pos, item):$/;"	m	class:SingleLinkList
insert_fixup	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^void RedBlackTree::insert_fixup(RBTreeNode *z) {$/;"	f	class:RedBlackTree
int64	math/sieve-method/era-with-numpy.py	/^from numpy import array, int64, bool8, append$/;"	i
isInterleave	lc/lc-97-interleaving-string.py	/^    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:$/;"	m	class:Solution
is_empty	py/data_structure/Deque.py	/^    def is_empty(self):$/;"	m	class:Deque
is_empty	py/data_structure/Queue.py	/^    def is_empty(self):$/;"	m	class:Queue
is_empty	py/data_structure/Queue_by_2_stack.py	/^    def is_empty(self):$/;"	m	class:Queue2stack
is_empty	py/data_structure/Stack.py	/^    def is_empty(self):$/;"	m	class:Stack
is_empty	py/data_structure/Stack_by_2_Queue.py	/^    def is_empty(self):$/;"	m	class:Stack
is_empty	py/data_structure/double_link_list.py	/^    def is_empty(self):$/;"	m	class:DoubleLinkList
is_empty	py/data_structure/single_cycle_link_list.py	/^    def is_empty(self):$/;"	m	class:SingleCycleLinkList
is_empty	py/data_structure/single_link_list.py	/^    def is_empty(self):$/;"	m	class:SingleLinkList
is_prime	math/sieve-method/Eratosthenes-v2.py	/^is_prime = [True] * (n + 1)$/;"	v
isprime	math/sieve-method/max-prime.py	/^def isprime(n):$/;"	f
isprime	math/sieve-method/test-1.cc	/^int isprime(int n) {$/;"	f
isvaild	lc/back-tracking/51-nqueens.cpp	/^    bool isvaild(int row, int col, vector<string>& board, int n) {$/;"	f	class:Solution	file:
it	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000-1.cpp	/^set<string>::iterator it;$/;"	v
item	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^struct item {$/;"	s	file:
item	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^struct item {$/;"	s	file:
jit	math/sieve-method/era-with-numpy.py	/^from numba import jit$/;"	i
judgePoint24	c_cpp/back-tracking/24-8-8-1000/24-pt.cpp	/^    bool judgePoint24(vector<int>& nums) {$/;"	f	class:Solution
judgePoint24	lc/back-tracking/24-point.cpp	/^    bool judgePoint24(vector<int>& cards) {$/;"	f	class:Solution
judgePoint24	py/back-tracking/24.py	/^    def judgePoint24(self, cards: List[int]) -> bool:$/;"	m	class:Solution
jump	lc/lc-45.py	/^    def jump(self, nums: List[int]) -> int:$/;"	m	class:Solution
key	c_cpp/Linked_List/lru.cpp	/^        int key, value;$/;"	m	struct:LRUCache::Node	file:
last	c_cpp/Linked_List/Double_Linked_List.hpp	/^ListNode* DoubleLinkedList::last() {$/;"	f	class:DoubleLinkedList
last	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^ListNode* RingDoubleLinkedList::last() { return head->prev; }$/;"	f	class:RingDoubleLinkedList
last	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^ListNode* RingSingleLinkedList::last() {$/;"	f	class:RingSingleLinkedList
last	c_cpp/Linked_List/Single_Linked_List.hpp	/^ListNode* SingleLinkedList::last() {$/;"	f	class:SingleLinkedList
lcm	lc/lc-592-frac-plus-minus.py	/^    def lcm(self, a, b):$/;"	m	class:Solution
left	c_cpp/Binary_Tree/bst.h	/^    BSTreeNode* left;$/;"	m	struct:BSTreeNode
left	c_cpp/Binary_Tree/bt.h	/^    TreeNode* left;$/;"	m	struct:TreeNode
left	c_cpp/Binary_Tree/rbt.h	/^    RBTreeNode* left;$/;"	m	struct:RBTreeNode
left_rotate	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^void RedBlackTree::left_rotate(RBTreeNode *x) {$/;"	f	class:RedBlackTree
len	c_cpp/Linked_List/Double_Linked_List.hpp	/^int DoubleLinkedList::len() {$/;"	f	class:DoubleLinkedList
len	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^int RingDoubleLinkedList::len() {$/;"	f	class:RingDoubleLinkedList
len	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^int RingSingleLinkedList::len() {$/;"	f	class:RingSingleLinkedList
len	c_cpp/Linked_List/Single_Linked_List.hpp	/^int SingleLinkedList::len() {$/;"	f	class:SingleLinkedList
length	py/data_structure/double_link_list.py	/^    def length(self):$/;"	m	class:DoubleLinkList
length	py/data_structure/single_cycle_link_list.py	/^    def length(self):$/;"	m	class:SingleCycleLinkList
length	py/data_structure/single_link_list.py	/^    def length(self):$/;"	m	class:SingleLinkList
letterCombinations	lc/back-tracking/lc-17-phone-number.py	/^    def letterCombinations(self, digits: str) -> List[str]:$/;"	m	class:Solution
letterCombinations1	lc/back-tracking/lc-17-phone-number.py	/^    def letterCombinations1(self, digits: str) -> List[str]:$/;"	m	class:Solution
level	c_cpp/Linked_List/Skip_List.cpp	/^    int level;$/;"	m	class:Skiplist	file:
long_division_sqrt	math/gpt-long-division.cpp	/^double long_division_sqrt(double x) {$/;"	f
longestConsecutive	lc/hash-table/lc-128.py	/^    def longestConsecutive(self, nums: List[int]) -> int:$/;"	m	class:Solution
longestPalindrome	lc/lc-5.py	/^    def longestPalindrome(self, s: str) -> str:$/;"	m	class:Solution
lookandsay	lc/look-and-say.py	/^def lookandsay(limit, sequence=21):$/;"	f
main	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/Binary_Tree/Binary_Tree.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/Graph_Theory/Union_Find_Set.cpp	/^int main() {$/;"	f
main	c_cpp/Linked_List/Reverse_Singly_linked_list.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/Linked_List/Skip_List.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/Linked_List/lru.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/Linked_List/test_Double_Linked_List.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	c_cpp/Linked_List/test_Ring_Double_Linked_List.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	c_cpp/Linked_List/test_Ring_Single_Linked_List.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	c_cpp/Linked_List/test_Single_Linked_List.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	c_cpp/Sort/Bubble_Sort.cpp	/^int main() {$/;"	f
main	c_cpp/Sort/Bucket_Sort.cpp	/^int main() {$/;"	f
main	c_cpp/Sort/Counting_Sort.cpp	/^int main() {$/;"	f
main	c_cpp/Sort/Heap_Sort.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	c_cpp/Sort/Heap_Sort_reverse.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	c_cpp/Sort/Insertion_Sort.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/Sort/Merge_Sort.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/Sort/My_Heap_Sort_Iter.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	c_cpp/Sort/Quick_Sort.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/Sort/Quick_Sort_CLRS.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/Sort/Radix_Sort.cpp	/^int main() {$/;"	f
main	c_cpp/Sort/Select_Sort.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/Sort/Shell_Sort.cpp	/^int main() {$/;"	f
main	c_cpp/Sort/Topology_Sort.cpp	/^int main() {$/;"	f
main	c_cpp/back-tracking/24-8-8-1000/24-pt.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^int main() {$/;"	f
main	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000-1.cpp	/^int main() {$/;"	f
main	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^int main() {$/;"	f
main	c_cpp/bit-ops/dec2bin.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/bit-ops/swap_by_xor.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/bit-ops/system_convert.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/dp/0-1-bag.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	c_cpp/dp/fibonacci.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	c_cpp/find-max-2max.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	c_cpp/swap_with_pair.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	c_cpp/test.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	c_cpp/union-find-set.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	java/88-1000.java	/^    public static void main(String[] args) {$/;"	m
main	lc/2ptr-slide-window/spiral-mat/1.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	lc/2ptr-slide-window/spiral-mat/3.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	lc/back-tracking/24-point.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	lc/back-tracking/377-combination4.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	lc/back-tracking/46.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	lc/back-tracking/51-nqueens.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	lc/back-tracking/93-ip.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	lc/back-tracking/eight_queens.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	lc/back-tracking/eight_queens_rest_method1.cpp	/^int main() {$/;"	f
main	lc/back-tracking/eight_queens_rest_method2.cpp	/^int main() {$/;"	f
main	lc/back-tracking/n-queens.c	/^int main(int argc, char const* argv[]) {$/;"	f
main	lc/dp_/climb_stairs.cpp	/^int main() {$/;"	f
main	lc/hash-table/1604.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	lc/hash-table/2936.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	lc/hash-table/lc-1624.cc	/^int main(int argc, char const *argv[]) {$/;"	f
main	lc/hash-table/lc-1941.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	lc/lc-1413.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	lc/lc-200-island-count.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	lc/lc-92.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	lc/linked-list-/24.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	lc/math/405-dec2hex.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	lc/max-max1.cpp	/^int main(int argc, char const *argv[])$/;"	f
main	lc/moveZeros.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	lc/str_/KMP.cpp	/^int main(int argc, char$/;"	f
main	lc/test-cpp/LinkedList.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	lc/test-lc-735.cc	/^int main(int argc, char const *argv[])$/;"	f
main	math/add-digits.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	math/calc_sqrt_by_div.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	math/calc_sqrt_by_long_div.cpp	/^int main() {$/;"	f
main	math/division.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	math/division/division-simulate.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	math/fast-multiply.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	math/gmp-2.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	math/gmp-3.cpp	/^int main(int argc, char **argv) {$/;"	f
main	math/gmp_test.cpp	/^int main() {$/;"	f
main	math/gpt-long-division-1.cpp	/^int main() {$/;"	f
main	math/gpt-long-division.cpp	/^int main() {$/;"	f
main	math/long_division_find_the_nice_number.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
main	math/long_division_with_gmp.c	/^int main(int argc, char const* argv[]) {$/;"	f
main	math/long_division_with_gmp.cpp	/^int main(int argc, char const* argv[]) {$/;"	f
main	math/sieve-method/max-prime.py	/^def main():$/;"	f
main	math/sieve-method/sieve-method.cc	/^int main(int argc, char const *argv[])$/;"	f
main	math/sieve-method/test-1.cc	/^int main(int argc, char const *argv[])$/;"	f
main	math/高精度计算C++.cpp	/^int main() {$/;"	f
main	test-string.cpp	/^int main(int argc, char const *argv[]) {$/;"	f
makeSet	py/find-and-union-set/find-union-set.py	/^def makeSet(size):$/;"	f
manacher	py/manacher.py	/^def manacher(s):$/;"	f
map	lc/back-tracking/eight_queens_rest_method1.cpp	/^double map[8][8], sum = 0, msum = 0;$/;"	v
map_q	lc/back-tracking/eight_queens_rest_method2.cpp	/^int map_q[maxn][maxn];$/;"	v
maxArea	lc/2ptr-slide-window/lc-11.py	/^    def maxArea(self, height: List[int]) -> int:$/;"	m	class:Solution
maxDistance	lc/dfs_bfs/1162.py	/^    def maxDistance(self, grid: List[List[int]]) -> int:$/;"	m	class:Solution
maxEqualFreq	lc/lc-1224.py	/^    def maxEqualFreq(self, nums: List[int]) -> int:$/;"	m	class:Solution
maxLengthBetweenEqualCharacters	lc/hash-table/lc-1624.cc	/^int maxLengthBetweenEqualCharacters(string s) {$/;"	f
maxProfit	lc/lc-122-sell-stock-II.py	/^    def maxProfit(self, prices: List[int]) -> int:$/;"	m	class:Solution
maxProfit	lc/lc-309.py	/^    def maxProfit(self, prices: List[int]) -> int:$/;"	m	class:Solution
maximalSquare	lc/lc-221.py	/^    def maximalSquare(self, matrix: List[List[str]]) -> int:$/;"	m	class:Solution
maximum	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^BSTreeNode *BinarySearchTree::maximum(BSTreeNode *x) {$/;"	f	class:BinarySearchTree
maximum	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^RBTreeNode *RedBlackTree::maximum(RBTreeNode *x) {$/;"	f	class:RedBlackTree
maximumRobots	lc/dp_/lc-6143.py	/^    def maximumRobots(self, chargeTimes: List[int],$/;"	m	class:Solution
maxn	lc/back-tracking/eight_queens_rest_method2.cpp	/^const int maxn = 10;$/;"	v
maxn	math/sieve-method/sieve-method.cc	/^constexpr int maxn = 1e8+10;$/;"	v
merge	c_cpp/Sort/Merge_Sort.cpp	/^void merge(vector<int> &arr, int L, int M, int R) {$/;"	f
merge	c_cpp/union-find-set.cpp	/^void merge(int i, int j) { fa[find(i)] = find(j); }$/;"	f
method1	lc/look-and-say.py	/^def method1(s='1', n=10):$/;"	f
mhash	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^map<string, bool> mhash;$/;"	v
mhash	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^map<string, bool> mhash;$/;"	v
minOperations	lc/6122.py	/^    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:$/;"	m	class:Solution
minPathSum	lc/lc-64.py	/^    def minPathSum(self, grid: List[List[int]]) -> int:$/;"	m	class:Solution
minStartValue	lc/lc-1413.cpp	/^int minStartValue(vector<int>& nums) {$/;"	f
minSwap	lc/dp_/801.py	/^    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:$/;"	m	class:Solution
minimum	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^BSTreeNode *BinarySearchTree::minimum(BSTreeNode *x) {$/;"	f	class:BinarySearchTree
minimum	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^RBTreeNode *RedBlackTree::minimum(RBTreeNode *x) {$/;"	f	class:RedBlackTree
missingTwo	lc/lc-2783-find-2-disappear-numbers.py	/^    def missingTwo(self, nums: List[int]) -> List[int]:  # hash$/;"	m	class:Solution
missingTwo1	lc/lc-2783-find-2-disappear-numbers.py	/^    def missingTwo1(self, nums: List[int]) -> List[int]:  # math$/;"	m	class:Solution
missingTwo2	lc/lc-2783-find-2-disappear-numbers.py	/^    def missingTwo2(self, nums: List[int]) -> List[int]:  # math$/;"	m	class:Solution
missingTwo3	lc/lc-2783-find-2-disappear-numbers.py	/^    def missingTwo3(self, nums: List[int]) -> List[int]:  # xor$/;"	m	class:Solution
missingTwo4	lc/lc-2783-find-2-disappear-numbers.py	/^    def missingTwo4(self, nums: List[int]) -> List[int]:  # set$/;"	m	class:Solution
modify	c_cpp/Linked_List/Double_Linked_List.hpp	/^void DoubleLinkedList::modify(int val, int node, int cnt) {$/;"	f	class:DoubleLinkedList
modify	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^void RingDoubleLinkedList::modify(int val, int node, int cnt) {$/;"	f	class:RingDoubleLinkedList
modify	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^void RingSingleLinkedList::modify(int val, int node, int cnt) {$/;"	f	class:RingSingleLinkedList
modify	c_cpp/Linked_List/Single_Linked_List.hpp	/^void SingleLinkedList::modify(int val, int node, int cnt) {$/;"	f	class:SingleLinkedList
morris_inorder	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::morris_inorder() {$/;"	f	class:BinaryTree
morris_inorder1	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::morris_inorder1() {$/;"	f	class:BinaryTree
morris_postorder	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::morris_postorder() {$/;"	f	class:BinaryTree
morris_postorder1	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::morris_postorder1() {$/;"	f	class:BinaryTree
morris_preorder	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::morris_preorder() {$/;"	f	class:BinaryTree
morris_preorder1	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::morris_preorder1() {$/;"	f	class:BinaryTree
moveToHead	c_cpp/Linked_List/lru.cpp	/^    void moveToHead(Node *node) {$/;"	f	class:LRUCache
moveZeroes	lc/moveZeros.cpp	/^void moveZeroes(vector<int> &v) {$/;"	f
msum	lc/back-tracking/eight_queens_rest_method1.cpp	/^double map[8][8], sum = 0, msum = 0;$/;"	v
mul	math/fast-multiply.cpp	/^int mul(int a, int b) {$/;"	f
myPow	lc/math/50.py	/^    def myPow(self, x: float, n: int) -> float:$/;"	m	class:Solution
mySqrt	math/calc_sqrt_by_div.cpp	/^long long mySqrt(long long n) {$/;"	f
mySqrt	math/long_division_sqrt.py	/^def mySqrt(n=0):$/;"	f
mySqrt	math/long_division_with_gmp.c	/^char* mySqrt(char* s) {$/;"	f
mySqrt	math/long_division_with_gmp.cpp	/^mpz_class mySqrt(mpz_class n) {$/;"	f
n	lc/Excel表列名称.py	/^n = 52$/;"	v
n	lc/back-tracking/eight_queens_rest_method2.cpp	/^int x1[maxn], x2[maxn], ans, n;$/;"	v
n	lc/lc-2.py	/^n=len(s)$/;"	v
n	math/long_division_sqrt.py	/^    n = 5239$/;"	v
n	math/sieve-method/Eratosthenes-v1.py	/^n = int(1e6)$/;"	v
n	math/sieve-method/Eratosthenes-v2.py	/^n = int(1e6)$/;"	v
n	math/sieve-method/era-with-numpy.py	/^n = int(1e6)$/;"	v
n	py/bit_ops/calc_bit_1.py	/^    n = 123$/;"	v
nega	math/高精度计算C++.cpp	/^    mutable bool nega = false;$/;"	m	class:BigInt	file:
new_img	py/1.py	/^new_img = Image.new('RGB', img.size, (255, 255, 255))$/;"	v
next	c_cpp/Linked_List/Double_Linked_List.hpp	/^    ListNode* next; \/\/ 后继结点$/;"	m	class:ListNode
next	c_cpp/Linked_List/Reverse_Singly_linked_list.cpp	/^    ListNode *next;$/;"	m	struct:ListNode	file:
next	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^    ListNode* next; \/\/ 后继结点$/;"	m	class:ListNode
next	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^    ListNode* next;$/;"	m	struct:ListNode
next	c_cpp/Linked_List/Single_Linked_List.hpp	/^    ListNode* next;$/;"	m	struct:ListNode
next	c_cpp/Linked_List/lru.cpp	/^        Node *prev, *next;$/;"	m	struct:LRUCache::Node	file:
next	lc/lc-92.cpp	/^    ListNode *next;$/;"	m	struct:ListNode	file:
next	lc/linked-list-/24.cpp	/^    ListNode* next;$/;"	m	struct:ListNode	file:
next	lc/test-cpp/LinkedList.cpp	/^    ListNode *next;$/;"	m	struct:ListNode	file:
nil	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^RBTreeNode *RedBlackTree::nil = new RBTreeNode();$/;"	m	class:RedBlackTree	file:
nil	c_cpp/Binary_Tree/rbt.h	/^    static RBTreeNode* nil;$/;"	m	class:RedBlackTree
np	py/1.py	/^import numpy as np$/;"	i
nthSuperUglyNumber	lc/lc-313.py	/^    def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:$/;"	m	class:Solution
num	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^    double num; \/\/ 数字$/;"	m	struct:item	file:
num	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^    int num;$/;"	m	struct:item	file:
numDecodings	lc/lc-91.py	/^    def numDecodings(self, s: str) -> int:$/;"	m	class:Solution
numIslands	lc/lc-200-island-count.cpp	/^    int numIslands(vector<vector<char>>& grid) {$/;"	f	class:Solution
nums	lc/6129.py	/^nums=[0,1,0,0,1,0,0,0]$/;"	v
nxt	lc/str_/KMP.py	/^    nxt = NEXT2(s2)$/;"	v
operator	math/long_division_with_gmp.c	/^ostream& operator<<(ostream& os, const vector<int> v) {$/;"	f
operator !=	math/高精度计算C++.cpp	/^    bool operator!=(const BigInt &rhs) const {$/;"	f	class:BigInt
operator *	math/高精度计算C++.cpp	/^    Complex operator*(const Complex &b) const {$/;"	f	struct:Complex
operator *	math/高精度计算C++.cpp	/^    friend BigInt operator*(const BigInt &lhs, const BigInt &rhs) {$/;"	f	class:BigInt
operator *	math/高精度计算C++.cpp	/^    friend BigInt operator*(const BigInt &lhs, const Long &x) {$/;"	f	class:BigInt
operator *=	math/高精度计算C++.cpp	/^    BigInt &operator*=(const BigInt &rhs) { return *this = *this * rhs; }$/;"	f	class:BigInt
operator *=	math/高精度计算C++.cpp	/^    BigInt &operator*=(const Long &x) { return *this = *this * x; }$/;"	f	class:BigInt
operator +	math/高精度计算C++.cpp	/^    Complex operator+(const Complex &b) const {$/;"	f	struct:Complex
operator +	math/高精度计算C++.cpp	/^    friend BigInt operator+(const BigInt &lhs, const BigInt &rhs) {$/;"	f	class:BigInt
operator +=	math/高精度计算C++.cpp	/^    BigInt &operator+=(const BigInt &rhs) {$/;"	f	class:BigInt
operator -	math/高精度计算C++.cpp	/^    Complex operator-(const Complex &b) const {$/;"	f	struct:Complex
operator -	math/高精度计算C++.cpp	/^    friend BigInt operator-(const BigInt &lhs, const BigInt &rhs) {$/;"	f	class:BigInt
operator -	math/高精度计算C++.cpp	/^    friend BigInt operator-(const BigInt &rhs) {$/;"	f	class:BigInt
operator -=	math/高精度计算C++.cpp	/^    BigInt &operator-=(const BigInt &rhs) {$/;"	f	class:BigInt
operator /	math/高精度计算C++.cpp	/^    friend BigInt operator\/(const BigInt &lhs, const BigInt &rhs) {$/;"	f	class:BigInt
operator /	math/高精度计算C++.cpp	/^    friend BigInt operator\/(const BigInt &num, const Long &x) {$/;"	f	class:BigInt
operator <	math/高精度计算C++.cpp	/^    bool operator<(const BigInt &rhs) const {$/;"	f	class:BigInt
operator <<	c_cpp/Binary_Tree/bst.h	/^ostream& operator<<(ostream& os, const vector<T>& v) {$/;"	f
operator <<	c_cpp/Binary_Tree/bt.h	/^ostream& operator<<(ostream& os, const vector<T>& v) {$/;"	f
operator <<	c_cpp/Binary_Tree/rbt.h	/^ostream& operator<<(ostream& os, const vector<T>& v) {$/;"	f
operator <<	c_cpp/Linked_List/Double_Linked_List.hpp	/^ostream& operator<<(ostream& os, ListNode* lp) {$/;"	f
operator <<	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^ostream& operator<<(ostream& os, ListNode* lp) {$/;"	f
operator <<	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^ostream& operator<<(ostream& os, ListNode* lp) {$/;"	f
operator <<	c_cpp/Linked_List/Single_Linked_List.hpp	/^ostream& operator<<(ostream& os, ListNode* lp) {$/;"	f
operator <<	c_cpp/Sort/Heap_Sort.cpp	/^ostream &operator<<(ostream &os, vector<int> &v) {$/;"	f
operator <<	c_cpp/Sort/Heap_Sort_reverse.cpp	/^ostream &operator<<(ostream &os, vector<int> &v) {$/;"	f
operator <<	c_cpp/Sort/My_Heap_Sort_Iter.cpp	/^ostream &operator<<(ostream &os, vector<int> &v) {$/;"	f
operator <<	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^ostream &operator<<(ostream &os, const map<T1, T2> &mp) {$/;"	f
operator <<	c_cpp/dp/0-1-bag.cpp	/^ostream& operator<<(ostream& os, const vector<int>& v) {$/;"	f
operator <<	c_cpp/dp/0-1-bag.cpp	/^ostream& operator<<(ostream& os, const vector<vector<int>>& v) {$/;"	f
operator <<	lc/2ptr-slide-window/spiral-mat/1.cpp	/^ostream& operator<<(ostream& os, const vector<T>& v1) {$/;"	f
operator <<	lc/2ptr-slide-window/spiral-mat/1.cpp	/^ostream& operator<<(ostream& os, const vector<vector<T>> v2) {$/;"	f
operator <<	lc/2ptr-slide-window/spiral-mat/3.cpp	/^ostream& operator<<(ostream& os, const vector<T>& v1) {$/;"	f
operator <<	lc/2ptr-slide-window/spiral-mat/3.cpp	/^ostream& operator<<(ostream& os, const vector<vector<T>> v2) {$/;"	f
operator <<	lc/back-tracking/46.cpp	/^ostream& operator<<(ostream& os, const vector<int>& v) {$/;"	f
operator <<	lc/back-tracking/46.cpp	/^ostream& operator<<(ostream& os, const vector<vector<int>>& v) {$/;"	f
operator <<	lc/back-tracking/51-nqueens.cpp	/^ostream& operator<<(ostream& os, const vector<T>& v) {$/;"	f
operator <<	lc/back-tracking/51-nqueens.cpp	/^ostream& operator<<(ostream& os, const vector<vector<T>>& v) {$/;"	f
operator <<	lc/lc-92.cpp	/^ostream &operator<<(ostream &os, const ListNode *node) {$/;"	f
operator <<	lc/linked-list-/24.cpp	/^ostream& operator<<(ostream& os, ListNode* lp) {$/;"	f
operator <<	lc/test-cpp/LinkedList.cpp	/^ostream& operator<<(ostream& os, const ListNode* node) {$/;"	f
operator <<	math/calc_sqrt_by_div.cpp	/^ostream& operator<<(ostream& os, const vector<int> v) {$/;"	f
operator <<	math/calc_sqrt_by_long_div.cpp	/^ostream& operator<<(ostream& os, const vector<int> v) {$/;"	f
operator <<	math/long_division_with_gmp.cpp	/^ostream& operator<<(ostream& os, const vector<mpz_class> v) {$/;"	f
operator <<	math/高精度计算C++.cpp	/^    friend std::ostream &operator<<(std::ostream &os, const BigInt &n) {$/;"	f	class:BigInt
operator <=	math/高精度计算C++.cpp	/^    bool operator<=(const BigInt &rhs) const {$/;"	f	class:BigInt
operator =	math/高精度计算C++.cpp	/^    BigInt &operator=(const Long x) {$/;"	f	class:BigInt
operator =	math/高精度计算C++.cpp	/^    BigInt &operator=(const char *s) {$/;"	f	class:BigInt
operator ==	math/高精度计算C++.cpp	/^    bool operator==(const BigInt &rhs) const {$/;"	f	class:BigInt
operator >	math/高精度计算C++.cpp	/^    bool operator>(const BigInt &rhs) const { return !(*this <= rhs); }$/;"	f	class:BigInt
operator >=	math/高精度计算C++.cpp	/^    bool operator>=(const BigInt &rhs) const { return !(*this < rhs); }$/;"	f	class:BigInt
operator >>	math/高精度计算C++.cpp	/^    friend std::istream &operator>>(std::istream &is, BigInt &n) {$/;"	f	class:BigInt
operator []	c_cpp/Linked_List/Double_Linked_List.hpp	/^ListNode* DoubleLinkedList::operator[](int pos) {$/;"	f	class:DoubleLinkedList
operator []	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^ListNode* RingDoubleLinkedList::operator[](int pos) {$/;"	f	class:RingDoubleLinkedList
operator []	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^ListNode* RingSingleLinkedList::operator[](int pos) {$/;"	f	class:RingSingleLinkedList
operator []	c_cpp/Linked_List/Single_Linked_List.hpp	/^ListNode* SingleLinkedList::operator[](int pos) {$/;"	f	class:SingleLinkedList
operator []	math/高精度计算C++.cpp	/^    Long &operator[](int index) const { return val[index]; }$/;"	f	class:BigInt	file:
output	lc/back-tracking/eight_queens.cpp	/^void output() {$/;"	f
parent	c_cpp/Binary_Tree/bst.h	/^    BSTreeNode* parent;$/;"	m	struct:BSTreeNode
parent	c_cpp/Binary_Tree/rbt.h	/^    RBTreeNode* parent;$/;"	m	struct:RBTreeNode
parents	c_cpp/Graph_Theory/Union_Find_Set.cpp	/^    vector<int> parents;$/;"	m	class:UnionFind	file:
peek	py/data_structure/Queue_by_2_stack.py	/^    def peek(self):$/;"	m	class:Queue2stack
peek	py/data_structure/Stack.py	/^    def peek(self):$/;"	m	class:Stack
peek	py/data_structure/Stack_by_2_Queue.py	/^    def peek(self):$/;"	m	class:Stack
perm	lc/utils1.py	/^from math import comb, perm$/;"	i
permute	lc/back-tracking/46.cpp	/^    vector<vector<int>> permute(vector<int>& nums) {$/;"	f	class:Solution
permute	lc/back-tracking/46.py	/^    def permute(self, nums: List[int]) -> List[List[int]]:$/;"	m	class:Solution
permute	lc/back-tracking/lc-46-perm1.py	/^    def permute(self, nums: List[int]) -> List[List[int]]:$/;"	m	class:Solution
permute1	lc/back-tracking/46.py	/^    def permute1(self, nums: List[int]) -> List[List[int]]:$/;"	m	class:Solution
permuteUnique	lc/back-tracking/lc-47-perm2.py	/^    def permuteUnique(self, nums: List[int]) -> List[List[int]]:$/;"	m	class:Solution
pi	lc/back-tracking/216.py	/^from math import pi$/;"	i
plus	py/class_rational_number.py	/^    def plus(self, another):$/;"	m	class:Rational
pop	c_cpp/Linked_List/Double_Linked_List.hpp	/^void DoubleLinkedList::pop(int pos) {$/;"	f	class:DoubleLinkedList
pop	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^void RingDoubleLinkedList::pop(int pos) {$/;"	f	class:RingDoubleLinkedList
pop	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^void RingSingleLinkedList::pop(int pos) {$/;"	f	class:RingSingleLinkedList
pop	c_cpp/Linked_List/Single_Linked_List.hpp	/^void SingleLinkedList::pop(int pos) {$/;"	f	class:SingleLinkedList
pop	py/data_structure/Stack.py	/^    def pop(self):$/;"	m	class:Stack
pop	py/data_structure/Stack_by_2_Queue.py	/^    def pop(self):$/;"	m	class:Stack
pop_back	c_cpp/Linked_List/Double_Linked_List.hpp	/^void DoubleLinkedList::pop_back() { pop(len()); }$/;"	f	class:DoubleLinkedList
pop_back	c_cpp/Linked_List/Single_Linked_List.hpp	/^void SingleLinkedList::pop_back() { pop(len()); }$/;"	f	class:SingleLinkedList
pop_front	c_cpp/Linked_List/Double_Linked_List.hpp	/^void DoubleLinkedList::pop_front() { pop(0); }$/;"	f	class:DoubleLinkedList
pop_front	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^void RingDoubleLinkedList::pop_front() { pop(0); }$/;"	f	class:RingDoubleLinkedList
pop_front	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^void RingSingleLinkedList::pop_front() { pop(0); }$/;"	f	class:RingSingleLinkedList
pop_front	c_cpp/Linked_List/Single_Linked_List.hpp	/^void SingleLinkedList::pop_front() { pop(0); }$/;"	f	class:SingleLinkedList
pop_front	py/data_structure/Deque.py	/^    def pop_front(self):$/;"	m	class:Deque
pop_rear	py/data_structure/Deque.py	/^    def pop_rear(self):$/;"	m	class:Deque
post_order	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::post_order() {$/;"	f	class:BinaryTree
post_order	py/data_structure/AVL_tree.py	/^    def post_order(self, node):$/;"	m	class:BinarySearchTree
post_order	py/data_structure/Red-Black-tree.py	/^    def post_order(self, node):$/;"	m	class:RBT
post_order	py/data_structure/binary-search-tree.py	/^    def post_order(self, node):$/;"	m	class:BinarySearchTree
post_order	py/data_structure/binary_Tree.py	/^    def post_order(self):$/;"	m	class:BinaryTree
post_order1	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::post_order1() {$/;"	f	class:BinaryTree
post_order2	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::post_order2() {$/;"	f	class:BinaryTree
post_order3	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::post_order3() {$/;"	f	class:BinaryTree
post_order4	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::post_order4() {$/;"	f	class:BinaryTree
post_order5	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::post_order5() {$/;"	f	class:BinaryTree
post_order_1	py/data_structure/AVL_tree.py	/^    def post_order_1(self, node):$/;"	m	class:BinarySearchTree
post_order_1	py/data_structure/Red-Black-tree.py	/^    def post_order_1(self, node):$/;"	m	class:RBT
post_order_1	py/data_structure/binary-search-tree.py	/^    def post_order_1(self, node):$/;"	m	class:BinarySearchTree
post_order_1	py/data_structure/binary_Tree.py	/^    def post_order_1(self):$/;"	m	class:BinaryTree
post_order_2	py/data_structure/AVL_tree.py	/^    def post_order_2(self, node):$/;"	m	class:BinarySearchTree
post_order_2	py/data_structure/Red-Black-tree.py	/^    def post_order_2(self, node):$/;"	m	class:RBT
post_order_2	py/data_structure/binary-search-tree.py	/^    def post_order_2(self, node):$/;"	m	class:BinarySearchTree
post_order_2	py/data_structure/binary_Tree.py	/^    def post_order_2(self):$/;"	m	class:BinaryTree
pre	math/sieve-method/Eratosthenes-v2.py	/^def pre(n: int) -> None:$/;"	f
pre_order	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::pre_order() {$/;"	f	class:BinaryTree
pre_order	py/data_structure/AVL_tree.py	/^    def pre_order(self, node):$/;"	m	class:BinarySearchTree
pre_order	py/data_structure/Red-Black-tree.py	/^    def pre_order(self, node):$/;"	m	class:RBT
pre_order	py/data_structure/binary-search-tree.py	/^    def pre_order(self, node):$/;"	m	class:BinarySearchTree
pre_order	py/data_structure/binary_Tree.py	/^    def pre_order(self):$/;"	m	class:BinaryTree
pre_order1	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::pre_order1() {$/;"	f	class:BinaryTree
pre_order2	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::pre_order2() {$/;"	f	class:BinaryTree
pre_order3	c_cpp/Binary_Tree/Binary_Tree.cpp	/^void BinaryTree::pre_order3() {$/;"	f	class:BinaryTree
pre_order_1	py/data_structure/AVL_tree.py	/^    def pre_order_1(self, node):$/;"	m	class:BinarySearchTree
pre_order_1	py/data_structure/Red-Black-tree.py	/^    def pre_order_1(self, node):$/;"	m	class:RBT
pre_order_1	py/data_structure/binary-search-tree.py	/^    def pre_order_1(self, node):$/;"	m	class:BinarySearchTree
pre_order_1	py/data_structure/binary_Tree.py	/^    def pre_order_1(self):$/;"	m	class:BinaryTree
predecessor	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^BSTreeNode *BinarySearchTree::predecessor(BSTreeNode *x) {$/;"	f	class:BinarySearchTree
predecessor	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^RBTreeNode *RedBlackTree::predecessor(RBTreeNode *x) {$/;"	f	class:RedBlackTree
prev	c_cpp/Linked_List/Double_Linked_List.hpp	/^    ListNode* prev; \/\/ 前驱结点$/;"	m	class:ListNode
prev	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^    ListNode* prev; \/\/ 前驱结点$/;"	m	class:ListNode
prev	c_cpp/Linked_List/lru.cpp	/^        Node *prev, *next;$/;"	m	struct:LRUCache::Node	file:
pri	math/sieve-method/sieve-method.cc	/^bitset<maxn> pri;$/;"	v
prime	math/sieve-method/era-with-numpy.py	/^prime = array([], dtype=int64)  # save prime$/;"	v
primes	math/sieve-method/sieve-method.cc	/^int primes[maxn];$/;"	v
print	c_cpp/Linked_List/Double_Linked_List.hpp	/^void DoubleLinkedList::print() { cout << head; }$/;"	f	class:DoubleLinkedList
print	c_cpp/Linked_List/Reverse_Singly_linked_list.cpp	/^void print(ListNode *ptr) {$/;"	f
print	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^void RingDoubleLinkedList::print() { cout << head; }$/;"	f	class:RingDoubleLinkedList
print	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^void RingSingleLinkedList::print() { cout << head; }$/;"	f	class:RingSingleLinkedList
print	c_cpp/Linked_List/Single_Linked_List.hpp	/^void SingleLinkedList::print() { cout << head; }$/;"	f	class:SingleLinkedList
print	c_cpp/Linked_List/lru.cpp	/^    void print() {$/;"	f	class:LRUCache
print	c_cpp/Linked_List/lru.cpp	/^    void print() {$/;"	f	class:LRUCache1
print	lc/back-tracking/eight_queens_rest_method1.cpp	/^void print() {$/;"	f
printArray	c_cpp/Sort/Bubble_Sort.cpp	/^void printArray(const vector<int>& arr) {$/;"	f
printArray	c_cpp/Sort/Bucket_Sort.cpp	/^void printArray(const vector<int>& arr) {$/;"	f
printArray	c_cpp/Sort/Counting_Sort.cpp	/^void printArray(const vector<int>& arr) {$/;"	f
printArray	c_cpp/Sort/Insertion_Sort.cpp	/^void printArray(vector<int> arr) {$/;"	f
printArray	c_cpp/Sort/Merge_Sort.cpp	/^void printArray(vector<int> arr) {$/;"	f
printArray	c_cpp/Sort/Quick_Sort.cpp	/^void printArray(int arr[], int len) {$/;"	f
printArray	c_cpp/Sort/Quick_Sort_CLRS.cpp	/^void printArray(const vector<int> &A) {$/;"	f
printArray	c_cpp/Sort/Radix_Sort.cpp	/^void printArray(const vector<int>& arr) {$/;"	f
printArray	c_cpp/Sort/Select_Sort.cpp	/^void printArray(vector<int> arr) {$/;"	f
printArray	c_cpp/Sort/Shell_Sort.cpp	/^void printArray(const vector<int>& arr) {$/;"	f
printResults	lc/back-tracking/n-queens.c	/^void printResults(time_t* pt1, time_t* pt2) {$/;"	f
print_	py/class_rational_number.py	/^    def print_(self):$/;"	m	class:Rational
print_Tree	py/data_structure/binary_Tree.py	/^    def print_Tree(self):$/;"	m	class:BinaryTree
print_tree	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^void BinarySearchTree::print_tree() {$/;"	f	class:BinarySearchTree
print_tree	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^void RedBlackTree::print_tree(bool iscolor, bool show_nil) {$/;"	f	class:RedBlackTree
printable	lc/back-tracking/n-queens.c	/^void printable(int boardsize, int* aQueenBitRes, SOLUTIONTYPE numSolution) {$/;"	f
printf	lc/test-py/test-1-args.py	/^def printf(a, *args):$/;"	f
prod	lc/back-tracking/lc-17-phone-number.py	/^from math import prod$/;"	i
push	py/data_structure/Stack.py	/^    def push(self, item):$/;"	m	class:Stack
push	py/data_structure/Stack_by_2_Queue.py	/^    def push(self, item):$/;"	m	class:Stack
push_map_check	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^bool push_map_check(int dep) {$/;"	f
push_map_check	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^bool push_map_check(int dep) {$/;"	f
put	c_cpp/Linked_List/lru.cpp	/^    void put(int key, int value) {$/;"	f	class:LRUCache
put	c_cpp/Linked_List/lru.cpp	/^    void put(int key, int value) {$/;"	f	class:LRUCache1
q	py/data_structure/Deque.py	/^    q = Deque()$/;"	v
q	py/data_structure/Queue.py	/^    q = Queue()$/;"	v
q	py/data_structure/Queue_by_2_stack.py	/^    q = Queue2stack()$/;"	v
qnxnto	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	math/build/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
queen	lc/back-tracking/eight_queens_rest_method2.cpp	/^void queen(int l) {$/;"	f
queens	py/eight_queen.py	/^    def queens(self, num, state=()):$/;"	m	class:Solution
quick_sort	py/sort_algorithm/quick_sort-gpt.py	/^def quick_sort(arr):$/;"	f
randint	lc/str_/KMP.py	/^from random import randint, seed$/;"	i
randomLevel	c_cpp/Linked_List/Skip_List.cpp	/^    int randomLevel() { \/\/ 更新层$/;"	f	class:Skiplist
re	lc/look-and-say.py	/^import re$/;"	i
recur	py/data_structure/AVL_tree.py	/^        def recur(node):$/;"	f	function:BinarySearchTree.post_order
recur	py/data_structure/Red-Black-tree.py	/^        def recur(node):$/;"	f	function:RBT.post_order
recur	py/data_structure/binary-search-tree.py	/^        def recur(node):$/;"	f	function:BinarySearchTree.post_order
recur_0	py/data_structure/AVL_tree.py	/^        def recur_0(node):$/;"	f	function:BinarySearchTree.pre_order
recur_0	py/data_structure/Red-Black-tree.py	/^        def recur_0(node):$/;"	f	function:RBT.pre_order
recur_0	py/data_structure/binary-search-tree.py	/^        def recur_0(node):$/;"	f	function:BinarySearchTree.pre_order
recur_0	py/data_structure/binary_Tree.py	/^        def recur_0(node):$/;"	f	function:BinaryTree.pre_order
recur_1	py/data_structure/AVL_tree.py	/^        def recur_1(node):$/;"	f	function:BinarySearchTree.in_order
recur_1	py/data_structure/Red-Black-tree.py	/^        def recur_1(node):$/;"	f	function:RBT.in_order
recur_1	py/data_structure/binary-search-tree.py	/^        def recur_1(node):$/;"	f	function:BinarySearchTree.in_order
recur_1	py/data_structure/binary_Tree.py	/^        def recur_1(node):$/;"	f	function:BinaryTree.in_order
recur_2	py/data_structure/binary_Tree.py	/^        def recur_2(node):$/;"	f	function:BinaryTree.post_order
reduce	py/factorial_loop.py	/^from functools import reduce$/;"	i
remove	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^void BinarySearchTree::remove(BSTreeNode *z) {$/;"	f	class:BinarySearchTree
remove	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^void RedBlackTree::remove(RBTreeNode *z) {$/;"	f	class:RedBlackTree
remove	c_cpp/Linked_List/Double_Linked_List.hpp	/^void DoubleLinkedList::remove(int val, int cnt) {$/;"	f	class:DoubleLinkedList
remove	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^void RingDoubleLinkedList::remove(int val, int cnt) {$/;"	f	class:RingDoubleLinkedList
remove	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^void RingSingleLinkedList::remove(int val, int cnt) {$/;"	f	class:RingSingleLinkedList
remove	c_cpp/Linked_List/Single_Linked_List.hpp	/^void SingleLinkedList::remove(int val, int cnt) {$/;"	f	class:SingleLinkedList
remove	py/data_structure/double_link_list.py	/^    def remove(self, item):$/;"	m	class:DoubleLinkList
remove	py/data_structure/single_cycle_link_list.py	/^    def remove(self, item):$/;"	m	class:SingleCycleLinkList
remove	py/data_structure/single_link_list.py	/^    def remove(self, item):$/;"	m	class:SingleLinkList
remove_1	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^void BinarySearchTree::remove_1(BSTreeNode *node) {$/;"	f	class:BinarySearchTree
res_str	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000-1.cpp	/^string res_str[NUM];$/;"	v
res_str	java/88-1000.java	/^static String[] res_str = new String[NUM];$/;"	f	class:Main
restoreIpAddresses	lc/back-tracking/93-ip.cpp	/^    vector<string> restoreIpAddresses(string s) {$/;"	f	class:Solution
result	py/manacher.py	/^result = manacher(s)$/;"	v
reverseBetween	lc/lc-92.cpp	/^    ListNode *reverseBetween(ListNode *head, int left, int right) {$/;"	f	class:Solution
reverseList	c_cpp/Linked_List/Reverse_Singly_linked_list.cpp	/^ListNode *reverseList(ListNode *head) {$/;"	f
rfind	c_cpp/Linked_List/Double_Linked_List.hpp	/^int DoubleLinkedList::rfind(int node) {$/;"	f	class:DoubleLinkedList
right	c_cpp/Binary_Tree/bst.h	/^    BSTreeNode* right;$/;"	m	struct:BSTreeNode
right	c_cpp/Binary_Tree/bt.h	/^    TreeNode* right;$/;"	m	struct:TreeNode
right	c_cpp/Binary_Tree/rbt.h	/^    RBTreeNode* right;$/;"	m	struct:RBTreeNode
right_rotate	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^void RedBlackTree::right_rotate(RBTreeNode *y) {$/;"	f	class:RedBlackTree
root	c_cpp/Binary_Tree/bst.h	/^    BSTreeNode* root;$/;"	m	class:BinarySearchTree
root	c_cpp/Binary_Tree/bt.h	/^    TreeNode* root;$/;"	m	class:BinaryTree
root	c_cpp/Binary_Tree/rbt.h	/^    RBTreeNode* root;$/;"	m	class:RedBlackTree
rvisit	c_cpp/Linked_List/Double_Linked_List.hpp	/^ListNode* DoubleLinkedList::rvisit(int rpos) {$/;"	f	class:DoubleLinkedList
s	lc/2ptr-slide-window/lc-11.py	/^    s = Solution().maxArea$/;"	v	class:Solution
s	lc/2ptr-slide-window/lc-15-3sum.py	/^    s = Solution().threeSum$/;"	v	class:Solution
s	lc/2ptr-slide-window/lc-16-3sum-closest.py	/^    s = Solution().threeSumClosest$/;"	v	class:Solution
s	lc/2ptr-slide-window/lc-18-4sum.py	/^    s = Solution().fourSum$/;"	v	class:Solution
s	lc/6129.py	/^s = Solution()$/;"	v
s	lc/back-tracking/216.py	/^    s = Solution().combinationSum3$/;"	v	class:Solution
s	lc/back-tracking/332.py	/^    s = Solution().findItinerary$/;"	v	class:Solution
s	lc/back-tracking/39.py	/^    s = Solution().combinationSum$/;"	v	class:Solution
s	lc/back-tracking/40.py	/^    s = Solution().combinationSum2$/;"	v	class:Solution
s	lc/back-tracking/46.py	/^    s = Solution().permute$/;"	v	class:Solution
s	lc/back-tracking/lc-17-phone-number.py	/^    s = Solution().letterCombinations$/;"	v	class:Solution
s	lc/back-tracking/lc-46-perm1.py	/^    s = Solution().permute$/;"	v	class:Solution
s	lc/back-tracking/lc-47-perm2.py	/^    s = Solution().permuteUnique$/;"	v	class:Solution
s	lc/back-tracking/lc-77-comb.py	/^    s = Solution().combine$/;"	v	class:Solution
s	lc/dfs_bfs/1162.py	/^    s = Solution().maxDistance$/;"	v	class:Solution
s	lc/diff-arrs/lc-6158.py	/^    s = Solution().shiftingLetters$/;"	v	class:Solution
s	lc/dp_/801.py	/^    s=Solution().minSwap$/;"	v	class:Solution
s	lc/lc-122-sell-stock-II.py	/^    s = Solution().maxProfit$/;"	v
s	lc/lc-1224.py	/^    s = Solution().maxEqualFreq$/;"	v	class:Solution
s	lc/lc-2.py	/^s = "".join(s)$/;"	v
s	lc/lc-2.py	/^s='hello'$/;"	v
s	lc/lc-2.py	/^s=list(s)$/;"	v
s	lc/lc-22.py	/^    s = Solution()$/;"	v	class:Solution
s	lc/lc-221.py	/^    s = Solution().maximalSquare$/;"	v	class:Solution
s	lc/lc-233.py	/^    s = Solution().countDigitOne$/;"	v	class:Solution
s	lc/lc-2669.py	/^s = Solution()$/;"	v
s	lc/lc-2783-find-2-disappear-numbers.py	/^    s = Solution().missingTwo3$/;"	v	class:Solution
s	lc/lc-309.py	/^    s = Solution().maxProfit$/;"	v	class:Solution
s	lc/lc-313.py	/^    s = Solution()$/;"	v	class:Solution
s	lc/lc-45.py	/^    s = Solution()$/;"	v	class:Solution
s	lc/lc-55.py	/^s = Solution()$/;"	v
s	lc/lc-592-frac-plus-minus.py	/^    s = Solution()$/;"	v	class:Solution
s	lc/lc-593.py	/^    s = Solution()$/;"	v	class:Solution
s	lc/lc-6121.py	/^s = Solution()$/;"	v
s	lc/lc-6142.py	/^s=Solution().countBadPairs([4,1,3,3])$/;"	v
s	lc/lc-64.py	/^    s = Solution().minPathSum$/;"	v	class:Solution
s	lc/lc-640-solve-equation.py	/^    s = Solution()$/;"	v	class:Solution
s	lc/lc-91.py	/^    s = Solution()$/;"	v	class:Solution
s	lc/lc-97-interleaving-string.py	/^    s = Solution()$/;"	v	class:Solution
s	lc/math/50.py	/^    s=Solution().myPow$/;"	v
s	lc/simulation/lc-2423.py	/^    s = Solution().equalFrequency$/;"	v	class:Solution
s	lc/tree-/654-max-bitree.py	/^    s=Solution().constructMaximumBinaryTree$/;"	v
s	math/sieve-method/Eratosthenes-v1.py	/^s = time()$/;"	v
s	math/sieve-method/Eratosthenes-v2.py	/^s = time()$/;"	v
s	math/sieve-method/Euler.py	/^s = time()$/;"	v
s	math/sieve-method/era-with-numpy.py	/^s = time()$/;"	v
s	py/back-tracking/24.py	/^    s = Solution().judgePoint24$/;"	v	class:Solution
s	py/data_structure/Stack.py	/^    s = Stack()$/;"	v
s	py/data_structure/Stack_by_2_Queue.py	/^    s = Stack()$/;"	v
s	py/eight_queen.py	/^s = Solution().solveNQueens(4)$/;"	v
s	py/manacher.py	/^s = 'babcbabcbaccba'$/;"	v
s	py/math/digits-1.py	/^s = '12345'$/;"	v
s1	lc/lc-6.py	/^    s1 = Solution().convert$/;"	v	class:Solution
s1	lc/str_/KMP.py	/^    s1 = "aabaabaaf"$/;"	v
s2	lc/str_/KMP.py	/^    s2 = "aabaaf"$/;"	v
say	lc/look-and-say.py	/^    def say(s):$/;"	f	function:A005150
scll	py/data_structure/single_cycle_link_list.py	/^    scll = SingleCycleLinkList()$/;"	v	class:SingleCycleLinkList
search	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^BSTreeNode *BinarySearchTree::search(int target) {$/;"	f	class:BinarySearchTree
search	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^RBTreeNode *RedBlackTree::search(int target) { return _search(root, target); }$/;"	f	class:RedBlackTree
search	c_cpp/Linked_List/Skip_List.cpp	/^    bool search(int target) {$/;"	f	class:Skiplist
search	py/data_structure/double_link_list.py	/^    def search(self, item):$/;"	m	class:DoubleLinkList
search	py/data_structure/single_cycle_link_list.py	/^    def search(self, item):$/;"	m	class:SingleCycleLinkList
search	py/data_structure/single_link_list.py	/^    def search(self, item):$/;"	m	class:SingleLinkList
search_ans	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^void search_ans(int dep) {$/;"	f
search_ans	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^void search_ans(int dep) {$/;"	f
seed	lc/str_/KMP.py	/^from random import randint, seed$/;"	i
shiftingLetters	lc/diff-arrs/lc-6158.py	/^    def shiftingLetters(self, s: str, shifts: List[List[int]]) -> str:$/;"	m	class:Solution
size	c_cpp/Linked_List/lru.cpp	/^    int capacity, size;$/;"	m	class:LRUCache	file:
size	c_cpp/Linked_List/lru.cpp	/^    int capacity, size;$/;"	m	class:LRUCache1	file:
size	math/高精度计算C++.cpp	/^    int size() const { return val.size(); }$/;"	f	class:BigInt	file:
size	py/data_structure/Deque.py	/^    def size(self):$/;"	m	class:Deque
size	py/data_structure/Queue.py	/^    def size(self):$/;"	m	class:Queue
size	py/data_structure/Queue_by_2_stack.py	/^    def size(self):$/;"	m	class:Queue2stack
size	py/data_structure/Stack.py	/^    def size(self):$/;"	m	class:Stack
size	py/data_structure/Stack_by_2_Queue.py	/^    def size(self):$/;"	m	class:Stack
sleep	lc/back-tracking/lc-17-phone-number.py	/^from time import sleep$/;"	i
sleep	lc/str_/KMP.py	/^from time import time, sleep$/;"	i
sleep	lc/test-py/test-1-args.py	/^from time import sleep$/;"	i
sll	py/data_structure/single_link_list.py	/^    sll = SingleLinkList()$/;"	v	class:SingleLinkList
smallestTrimmedNumbers	lc/lc-6121.py	/^    def smallestTrimmedNumbers(self,$/;"	m	class:Solution
solve	lc/back-tracking/eight_queens.cpp	/^void solve(int row) {$/;"	f
solveEquation	lc/lc-640-solve-equation.py	/^    def solveEquation(self, equation: str) -> str:$/;"	m	class:Solution
solveNQueens	lc/back-tracking/51-nqueens.cpp	/^    vector<vector<string>> solveNQueens(int n) {$/;"	f	class:Solution
solveNQueens	py/eight_queen.py	/^    def solveNQueens(self, n: int):$/;"	m	class:Solution
solve_num	lc/back-tracking/eight_queens.cpp	/^int solve_num = 0;$/;"	v
sortedSquares	lc/lc-977-square-sort.py	/^    def sortedSquares(self, nums: List[int]) -> List[int]:$/;"	m	class:Solution
sorted_colors	py/1.py	/^sorted_colors = sorted(colors.items(), key=lambda x: x[1], reverse=True)$/;"	v
spiralMatrixIII	lc/2ptr-slide-window/spiral-mat/3.cpp	/^    vector<vector<int>> spiralMatrixIII(int rows, int cols, int rStart,$/;"	f	class:Solution
spiralMatrixIII1	lc/2ptr-slide-window/spiral-mat/3.cpp	/^    vector<vector<int>> spiralMatrixIII1(int rows, int cols, int rStart,$/;"	f	class:Solution
spiralOrder	lc/2ptr-slide-window/spiral-mat/1.cpp	/^    vector<int> spiralOrder(vector<vector<int>>& matrix) {$/;"	f	class:Solution
sq	lc/lc-977-square-sort.py	/^        def sq(x): return x * x$/;"	f	function:Solution.sortedSquares
sqrt	lc/lc-2783-find-2-disappear-numbers.py	/^from math import sqrt$/;"	i
sqrtByLongDivision	math/calc_sqrt_by_long_div.cpp	/^int sqrtByLongDivision(int n) {$/;"	f
st	py/data_structure/monotonous_stack.py	/^st = []$/;"	v
std	math/long_division_with_gmp.c	/^using namespace std;$/;"	v
successor	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^BSTreeNode *BinarySearchTree::successor(BSTreeNode *x) {$/;"	f	class:BinarySearchTree
successor	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^RBTreeNode *RedBlackTree::successor(RBTreeNode *x) {$/;"	f	class:RedBlackTree
sum	lc/back-tracking/eight_queens_rest_method1.cpp	/^double map[8][8], sum = 0, msum = 0;$/;"	v
sum_	py/recursion/num_sum.py	/^def sum_(n):$/;"	f
swap	c_cpp/back-tracking/24-8-8-1000/8_8_1000.cpp	/^void swap(int i, int j) {$/;"	f
swap	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000.cpp	/^void swap(int i, int j) {$/;"	f
swap	c_cpp/bit-ops/swap_by_xor.cpp	/^void swap(int &a, int &b) { a ^= b ^= a ^= b; }$/;"	f
swap	math/高精度计算C++.cpp	/^    void swap(const BigInt &rhs) const {$/;"	f	class:BigInt
swapPairs	lc/linked-list-/24.cpp	/^    ListNode* swapPairs(ListNode* head) {$/;"	f	class:Solution
t0	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^void t0() {$/;"	f
t0	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^void t0() {$/;"	f
t0	math/long_division_with_gmp.c	/^void t0() {$/;"	f
t1	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^void t1() {$/;"	f
t1	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^void t1() {$/;"	f
t1	c_cpp/Linked_List/Skip_List.cpp	/^void t1() {$/;"	f
t1	c_cpp/Linked_List/lru.cpp	/^void t1() {$/;"	f
t1	c_cpp/Sort/Heap_Sort.cpp	/^void t1() {$/;"	f
t1	c_cpp/Sort/Heap_Sort_reverse.cpp	/^void t1() {$/;"	f
t1	c_cpp/Sort/My_Heap_Sort_Iter.cpp	/^void t1() {$/;"	f
t1	c_cpp/Sort/Quick_Sort_CLRS.cpp	/^void t1() {$/;"	f
t1	c_cpp/bit-ops/dec2bin.cpp	/^void t1() {$/;"	f
t1	c_cpp/dp/fibonacci.cpp	/^void t1() {$/;"	f
t1	c_cpp/find-max-2max.cpp	/^void t1() {$/;"	f
t1	lc/2ptr-slide-window/spiral-mat/1.cpp	/^void t1() {$/;"	f
t1	lc/2ptr-slide-window/spiral-mat/3.cpp	/^void t1() {$/;"	f
t1	lc/back-tracking/377-combination4.cpp	/^void t1() {$/;"	f
t1	lc/hash-table/1604.cpp	/^void t1() {$/;"	f
t1	lc/lc-1413.cpp	/^void t1() {$/;"	f
t1	lc/lc-55.py	/^t	v
t1	lc/lc-92.cpp	/^void t1() {$/;"	f
t1	lc/test-cpp/LinkedList.cpp	/^void t1() {$/;"	f
t1	math/calc_sqrt_by_div.cpp	/^void t1() {$/;"	f
t1	math/division.cpp	/^void t1() {$/;"	f
t1	math/division/division-simulate.cpp	/^void t1() {$/;"	f
t1	math/gmp-2.cpp	/^void t1() { \/\/ Declare two arbitrary-precision integers$/;"	f
t1	math/long_division_find_the_nice_number.cpp	/^void t1() { \/\/$/;"	f
t1	math/long_division_with_gmp.c	/^void t1() {$/;"	f
t1	math/long_division_with_gmp.cpp	/^void t1() {$/;"	f
t2	c_cpp/Linked_List/lru.cpp	/^void t2() {$/;"	f
t2	c_cpp/find-max-2max.cpp	/^void t2() {$/;"	f
t2	math/calc_sqrt_by_div.cpp	/^void t2() {$/;"	f
t2	math/division.cpp	/^void t2() {$/;"	f
t2	math/division/division-simulate.cpp	/^void t2() {$/;"	f
t2	math/gmp-2.cpp	/^void t2() {$/;"	f
t2	math/long_division_find_the_nice_number.cpp	/^void t2() {$/;"	f
t2	math/long_division_with_gmp.c	/^void t2() {$/;"	f
t2	math/long_division_with_gmp.cpp	/^void t2() {$/;"	f
tail	c_cpp/Linked_List/lru.cpp	/^    Node *head, *tail;                \/\/ 存头尾结点, 便于删除$/;"	m	class:LRUCache	file:
test	lc/lc-1089-duplicate_zero.py	/^def test(arr):$/;"	f
test	lc/str_/KMP.py	/^def test():$/;"	f
test1	lc/lc-592-frac-plus-minus.py	/^    test1 = ["3\/10+1\/5-10\/7-5\/6-2\/5", "-1\/2+1\/2+1\/3", '-1\/2+1\/2']$/;"	v	class:Solution
test1	lc/max-max1.cpp	/^int test1(vector<int> &v)$/;"	f
test1	py/data_structure/timeit_list.py	/^def test1():$/;"	f
test1	py/data_structure/timeit_list.py	/^timer1 = Timer("test1()", "from __main__ import test1")$/;"	i
test2	lc/lc-592-frac-plus-minus.py	/^    test2 = ['1\/2-1\/3', "5\/3+1\/3", '3\/5', '3\/1']$/;"	v	class:Solution
test2	lc/max-max1.cpp	/^int test2(vector<int> &v)$/;"	f
test2	py/data_structure/timeit_list.py	/^def test2():$/;"	f
test2	py/data_structure/timeit_list.py	/^timer2 = Timer("test2()", "from __main__ import test2")$/;"	i
test3	lc/max-max1.cpp	/^int test3(vector<int> &v)$/;"	f
test3	py/data_structure/timeit_list.py	/^def test3():$/;"	f
test3	py/data_structure/timeit_list.py	/^timer3 = Timer("test3()", "from __main__ import test3")$/;"	i
test4	py/data_structure/timeit_list.py	/^def test4():$/;"	f
test4	py/data_structure/timeit_list.py	/^timer4 = Timer("test4()", "from __main__ import test4")$/;"	i
test5	py/data_structure/timeit_list.py	/^def test5():$/;"	f
test5	py/data_structure/timeit_list.py	/^timer5 = Timer("test5()", "from __main__ import test5")$/;"	i
testNext	lc/str_/KMP.py	/^    def testNext(str1, func):$/;"	f	function:test
test_append_pop	c_cpp/Linked_List/test_Single_Linked_List.cpp	/^void test_append_pop() {$/;"	f
test_ctor	c_cpp/Linked_List/test_Double_Linked_List.cpp	/^void test_ctor() {$/;"	f
test_ctor	c_cpp/Linked_List/test_Ring_Double_Linked_List.cpp	/^void test_ctor() {$/;"	f
test_ctor	c_cpp/Linked_List/test_Ring_Single_Linked_List.cpp	/^void test_ctor() {$/;"	f
test_ctor	c_cpp/Linked_List/test_Single_Linked_List.cpp	/^void test_ctor() {$/;"	f
test_eg	lc/lc-91.py	/^    test_eg = ["1", '1123', '129', '190', '1010', '10',$/;"	v	class:Solution
test_find	c_cpp/Linked_List/test_Ring_Double_Linked_List.cpp	/^void test_find() {$/;"	f
test_find	c_cpp/Linked_List/test_Ring_Single_Linked_List.cpp	/^void test_find() {$/;"	f
test_find_modify	c_cpp/Linked_List/test_Single_Linked_List.cpp	/^void test_find_modify() {$/;"	f
test_find_pop	c_cpp/Linked_List/test_Double_Linked_List.cpp	/^void test_find_pop() {$/;"	f
test_fundamental	c_cpp/Linked_List/test_Double_Linked_List.cpp	/^void test_fundamental() {$/;"	f
test_fundamental	c_cpp/Linked_List/test_Ring_Double_Linked_List.cpp	/^void test_fundamental() {$/;"	f
test_fundamental	c_cpp/Linked_List/test_Ring_Single_Linked_List.cpp	/^void test_fundamental() {$/;"	f
test_fundamental	c_cpp/Linked_List/test_Single_Linked_List.cpp	/^void test_fundamental() {$/;"	f
test_insert	c_cpp/Linked_List/test_Double_Linked_List.cpp	/^void test_insert() {$/;"	f
test_insert_1	c_cpp/Linked_List/test_Ring_Double_Linked_List.cpp	/^void test_insert_1() {$/;"	f
test_insert_1	c_cpp/Linked_List/test_Ring_Single_Linked_List.cpp	/^void test_insert_1() {$/;"	f
test_insert_2	c_cpp/Linked_List/test_Ring_Double_Linked_List.cpp	/^void test_insert_2() {$/;"	f
test_insert_2	c_cpp/Linked_List/test_Ring_Single_Linked_List.cpp	/^void test_insert_2() {$/;"	f
test_operator_at	c_cpp/Linked_List/test_Ring_Double_Linked_List.cpp	/^void test_operator_at() {$/;"	f
test_operator_at	c_cpp/Linked_List/test_Ring_Single_Linked_List.cpp	/^void test_operator_at() {$/;"	f
test_operator_at_modify	c_cpp/Linked_List/test_Double_Linked_List.cpp	/^void test_operator_at_modify() {$/;"	f
test_pop	c_cpp/Linked_List/test_Double_Linked_List.cpp	/^void test_pop() {$/;"	f
test_pop_1	c_cpp/Linked_List/test_Ring_Double_Linked_List.cpp	/^void test_pop_1() {$/;"	f
test_pop_1	c_cpp/Linked_List/test_Ring_Single_Linked_List.cpp	/^void test_pop_1() {$/;"	f
test_remove_modify	c_cpp/Linked_List/test_Ring_Double_Linked_List.cpp	/^void test_remove_modify() {$/;"	f
test_remove_modify	c_cpp/Linked_List/test_Ring_Single_Linked_List.cpp	/^void test_remove_modify() {$/;"	f
threeSum	lc/2ptr-slide-window/lc-15-3sum.py	/^    def threeSum(self, nums: List[int]) -> List[List[int]]:$/;"	m	class:Solution
threeSumClosest	lc/2ptr-slide-window/lc-16-3sum-closest.py	/^    def threeSumClosest(self, nums: List[int], target: int) -> int:$/;"	m	class:Solution
time	lc/str_/KMP.py	/^from time import time, sleep$/;"	i
time	math/sieve-method/Eratosthenes-v1.py	/^from time import time$/;"	i
time	math/sieve-method/Eratosthenes-v2.py	/^from time import time$/;"	i
time	math/sieve-method/Euler.py	/^from time import time$/;"	i
time	math/sieve-method/era-with-numpy.py	/^from time import time$/;"	i
timer1	py/data_structure/timeit_list.py	/^timer1 = Timer("test1()", "from __main__ import test1")$/;"	v
timer2	py/data_structure/timeit_list.py	/^timer2 = Timer("test2()", "from __main__ import test2")$/;"	v
timer3	py/data_structure/timeit_list.py	/^timer3 = Timer("test3()", "from __main__ import test3")$/;"	v
timer4	py/data_structure/timeit_list.py	/^timer4 = Timer("test4()", "from __main__ import test4")$/;"	v
timer5	py/data_structure/timeit_list.py	/^timer5 = Timer("test5()", "from __main__ import test5")$/;"	v
times	c_cpp/back-tracking/24-8-8-1000/src-8-8-1000-1.cpp	/^int times = 0;$/;"	v
times	java/88-1000.java	/^static int times = 0;$/;"	f	class:Main
transplant	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^void BinarySearchTree::transplant(BSTreeNode *u, BSTreeNode *v) {$/;"	f	class:BinarySearchTree
transplant	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^void RedBlackTree::transplant(RBTreeNode *u, RBTreeNode *v) {$/;"	f	class:RedBlackTree
travel	py/data_structure/double_link_list.py	/^    def travel(self):$/;"	m	class:DoubleLinkList
travel	py/data_structure/single_cycle_link_list.py	/^    def travel(self):$/;"	m	class:SingleCycleLinkList
travel	py/data_structure/single_link_list.py	/^    def travel(self):$/;"	m	class:SingleLinkList
tree	py/data_structure/binary_Tree.py	/^    tree = BinaryTree()$/;"	v	class:BinaryTree
trim	math/高精度计算C++.cpp	/^    void trim() const {$/;"	f	class:BigInt	file:
union	lc/hash-table/lc-128.py	/^        def union(i, j):$/;"	f	function:Solution.longestConsecutive
union	py/find-and-union-set/find-union-set.py	/^def union(i, j):$/;"	f
updateMatrix	lc/dfs_bfs/542-0-1-mat.py	/^    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:$/;"	m	class:Solution
val	c_cpp/Binary_Tree/bst.h	/^    int val;$/;"	m	struct:BSTreeNode
val	c_cpp/Binary_Tree/bt.h	/^    int val;$/;"	m	struct:TreeNode
val	c_cpp/Binary_Tree/rbt.h	/^    int val;$/;"	m	struct:RBTreeNode
val	c_cpp/Linked_List/Double_Linked_List.hpp	/^    int val;$/;"	m	class:ListNode
val	c_cpp/Linked_List/Reverse_Singly_linked_list.cpp	/^    int val;$/;"	m	struct:ListNode	file:
val	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^    int val;$/;"	m	class:ListNode
val	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^    int val;$/;"	m	struct:ListNode
val	c_cpp/Linked_List/Single_Linked_List.hpp	/^    int val;$/;"	m	struct:ListNode
val	c_cpp/Linked_List/Skip_List.cpp	/^        int val;$/;"	m	struct:Skiplist::Node	file:
val	lc/lc-92.cpp	/^    int val;$/;"	m	struct:ListNode	file:
val	lc/linked-list-/24.cpp	/^    int val;$/;"	m	struct:ListNode	file:
val	lc/test-cpp/LinkedList.cpp	/^    int val;$/;"	m	struct:ListNode	file:
val	math/高精度计算C++.cpp	/^    mutable std::vector<Long> val;$/;"	m	class:BigInt	file:
validSquare	lc/lc-593.py	/^    def validSquare(self, p1: List[int], p2: List[int],$/;"	m	class:Solution
value	c_cpp/Linked_List/lru.cpp	/^        int key, value;$/;"	m	struct:LRUCache::Node	file:
visit	c_cpp/Linked_List/Double_Linked_List.hpp	/^ListNode* DoubleLinkedList::visit(int pos) { return this->operator[](pos); }$/;"	f	class:DoubleLinkedList
visit	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^ListNode* RingDoubleLinkedList::visit(int pos) { return this->operator[](pos); }$/;"	f	class:RingDoubleLinkedList
visit	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^ListNode* RingSingleLinkedList::visit(int pos) { return this->operator[](pos); }$/;"	f	class:RingSingleLinkedList
visit	c_cpp/Linked_List/Single_Linked_List.hpp	/^ListNode* SingleLinkedList::visit(int pos) { return operator[](pos); }$/;"	f	class:SingleLinkedList
volatile	math/build/CMakeFiles/3.24.2/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
x	math/高精度计算C++.cpp	/^    double x, y;$/;"	m	struct:Complex	file:
x	py/class_rational_number.py	/^x = Rational(3, 5)$/;"	v
x1	lc/back-tracking/eight_queens_rest_method2.cpp	/^int x1[maxn], x2[maxn], ans, n;$/;"	v
x2	lc/back-tracking/eight_queens_rest_method2.cpp	/^int x1[maxn], x2[maxn], ans, n;$/;"	v
x2dec	c_cpp/bit-ops/system_convert.cpp	/^int x2dec(string x, int k) {$/;"	f
x2dec	py/bit_ops/system_convert.py	/^def x2dec(x: str, k: int) -> int:$/;"	f
y	math/高精度计算C++.cpp	/^    double x, y;$/;"	m	struct:Complex	file:
y	py/class_rational_number.py	/^y = Rational(4, 6)$/;"	v
z	py/class_rational_number.py	/^z = x.plus(y)$/;"	v
zeroFilledSubarray	lc/6129.py	/^    def zeroFilledSubarray(self, nums: List[int]) -> int:$/;"	m	class:Solution
~BinarySearchTree	c_cpp/Binary_Tree/Binary_Search_Tree.cpp	/^BinarySearchTree::~BinarySearchTree() {$/;"	f	class:BinarySearchTree
~BinaryTree	c_cpp/Binary_Tree/Binary_Tree.cpp	/^BinaryTree::~BinaryTree() {$/;"	f	class:BinaryTree
~DoubleLinkedList	c_cpp/Linked_List/Double_Linked_List.hpp	/^DoubleLinkedList::~DoubleLinkedList() {$/;"	f	class:DoubleLinkedList
~RedBlackTree	c_cpp/Binary_Tree/Red_Black_Tree.cpp	/^RedBlackTree::~RedBlackTree() {$/;"	f	class:RedBlackTree
~RingDoubleLinkedList	c_cpp/Linked_List/Ring_Double_Linked_List.hpp	/^RingDoubleLinkedList::~RingDoubleLinkedList() {$/;"	f	class:RingDoubleLinkedList
~RingSingleLinkedList	c_cpp/Linked_List/Ring_Single_Linked_List.hpp	/^RingSingleLinkedList::~RingSingleLinkedList() {$/;"	f	class:RingSingleLinkedList
~SingleLinkedList	c_cpp/Linked_List/Single_Linked_List.hpp	/^SingleLinkedList::~SingleLinkedList() {$/;"	f	class:SingleLinkedList
~Skiplist	c_cpp/Linked_List/Skip_List.cpp	/^    ~Skiplist() { delete head; }$/;"	f	class:Skiplist
